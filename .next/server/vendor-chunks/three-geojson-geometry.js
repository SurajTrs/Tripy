"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-geojson-geometry";
exports.ids = ["vendor-chunks/three-geojson-geometry"];
exports.modules = {

/***/ "(ssr)/./node_modules/three-geojson-geometry/dist/three-geojson-geometry.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/three-geojson-geometry/dist/three-geojson-geometry.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GeoJsonGeometry)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var earcut__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! earcut */ \"(ssr)/./node_modules/earcut/src/earcut.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/distance.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/interpolate.js\");\n/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-interpolate */ \"(ssr)/./node_modules/d3-interpolate/src/number.js\");\n\n\n\n\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _createClass(e, r, t) {\n  return Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _createForOfIteratorHelper(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (!t) {\n    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {\n      t && (r = t);\n      var n = 0,\n        F = function () {};\n      return {\n        s: F,\n        n: function () {\n          return n >= r.length ? {\n            done: !0\n          } : {\n            done: !1,\n            value: r[n++]\n          };\n        },\n        e: function (r) {\n          throw r;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var o,\n    a = !0,\n    u = !1;\n  return {\n    s: function () {\n      t = t.call(r);\n    },\n    n: function () {\n      var r = t.next();\n      return a = r.done, r;\n    },\n    e: function (r) {\n      u = !0, o = r;\n    },\n    f: function () {\n      try {\n        a || null == t.return || t.return();\n      } finally {\n        if (u) throw o;\n      }\n    }\n  };\n}\nfunction _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && _setPrototypeOf(t, e);\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return _assertThisInitialized(t);\n}\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nfunction _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\nvar interpolateLine = function interpolateLine() {\n  var lineCoords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var maxDegDistance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var result = [];\n  var prevPnt = null;\n  lineCoords.forEach(function (pnt) {\n    if (prevPnt) {\n      var dist = (0,d3_geo__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(pnt, prevPnt) * 180 / Math.PI;\n      if (dist > maxDegDistance) {\n        var geoInterpol = (0,d3_geo__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(prevPnt, pnt);\n        var altInterpol = prevPnt.length > 2 || pnt.length > 2 ? (0,d3_interpolate__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(prevPnt[2] || 0, pnt[2] || 0) : null;\n        var interpol = altInterpol ? function (t) {\n          return [].concat(_toConsumableArray(geoInterpol(t)), [altInterpol(t)]);\n        } : geoInterpol;\n        var tStep = 1 / Math.ceil(dist / maxDegDistance);\n        var t = tStep;\n        while (t < 1) {\n          result.push(interpol(t));\n          t += tStep;\n        }\n      }\n    }\n    result.push(prevPnt = pnt);\n  });\n  return result;\n};\n\nvar THREE = typeof window !== 'undefined' && window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  BufferGeometry: three__WEBPACK_IMPORTED_MODULE_4__.BufferGeometry,\n  Float32BufferAttribute: three__WEBPACK_IMPORTED_MODULE_4__.Float32BufferAttribute\n};\n\n// support both modes for backwards threejs compatibility\nvar setAttributeFn = new THREE.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\nvar GeoJsonGeometry = /*#__PURE__*/function (_THREE$BufferGeometry) {\n  function GeoJsonGeometry(geoJson) {\n    var _this;\n    var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n    _classCallCheck(this, GeoJsonGeometry);\n    _this = _callSuper(this, GeoJsonGeometry);\n    _this.type = 'GeoJsonGeometry';\n    _this.parameters = {\n      geoJson: geoJson,\n      radius: radius,\n      resolution: resolution\n    };\n\n    // process various geometry types\n    var groups = ({\n      Point: genPoint,\n      MultiPoint: genMultiPoint,\n      LineString: genLineString,\n      MultiLineString: genMultiLineString,\n      Polygon: genPolygon,\n      MultiPolygon: genMultiPolygon\n    }[geoJson.type] || function () {\n      return [];\n    })(geoJson.coordinates, radius);\n\n    // concat groups\n    var indices = [],\n      vertices = [];\n    var groupCnt = 0;\n    groups.forEach(function (newG) {\n      var prevIndCnt = indices.length;\n      concatGroup({\n        indices: indices,\n        vertices: vertices\n      }, newG);\n      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);\n    });\n\n    // build geometry\n    indices.length && _this.setIndex(indices);\n    vertices.length && _this[setAttributeFn]('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n    //\n\n    function genPoint(coords, r) {\n      var vertices = polar2Cartesian(coords[1], coords[0], r + (coords[2] || 0));\n      var indices = [];\n      return [{\n        vertices: vertices,\n        indices: indices\n      }];\n    }\n    function genMultiPoint(coords, r) {\n      var result = {\n        vertices: [],\n        indices: []\n      };\n      coords.map(function (c) {\n        return genPoint(c, r);\n      }).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          newPnt = _ref2[0];\n        concatGroup(result, newPnt);\n      });\n      return [result];\n    }\n    function genLineString(coords, r) {\n      var coords3d = interpolateLine(coords, resolution).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 3),\n          lng = _ref4[0],\n          lat = _ref4[1],\n          _ref4$ = _ref4[2],\n          alt = _ref4$ === void 0 ? 0 : _ref4$;\n        return polar2Cartesian(lat, lng, r + alt);\n      });\n      var _earcutFlatten = (0,earcut__WEBPACK_IMPORTED_MODULE_0__.flatten)([coords3d]),\n        vertices = _earcutFlatten.vertices;\n      var numPoints = Math.round(vertices.length / 3);\n      var indices = [];\n      for (var vIdx = 1; vIdx < numPoints; vIdx++) {\n        indices.push(vIdx - 1, vIdx);\n      }\n      return [{\n        vertices: vertices,\n        indices: indices\n      }];\n    }\n    function genMultiLineString(coords, r) {\n      var result = {\n        vertices: [],\n        indices: []\n      };\n      coords.map(function (c) {\n        return genLineString(c, r);\n      }).forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n          newLine = _ref6[0];\n        concatGroup(result, newLine);\n      });\n      return [result];\n    }\n    function genPolygon(coords, r) {\n      var coords3d = coords.map(function (coordsSegment) {\n        return interpolateLine(coordsSegment, resolution).map(function (_ref7) {\n          var _ref8 = _slicedToArray(_ref7, 3),\n            lng = _ref8[0],\n            lat = _ref8[1],\n            _ref8$ = _ref8[2],\n            alt = _ref8$ === void 0 ? 0 : _ref8$;\n          return polar2Cartesian(lat, lng, r + alt);\n        });\n      });\n\n      // Each point generates 3 vertice items (x,y,z).\n      var _earcutFlatten2 = (0,earcut__WEBPACK_IMPORTED_MODULE_0__.flatten)(coords3d),\n        vertices = _earcutFlatten2.vertices,\n        holes = _earcutFlatten2.holes;\n      var firstHoleIdx = holes[0] || Infinity;\n      var outerVertices = vertices.slice(0, firstHoleIdx * 3);\n      var holeVertices = vertices.slice(firstHoleIdx * 3);\n      var holesIdx = new Set(holes);\n      var numPoints = Math.round(vertices.length / 3);\n      var outerIndices = [],\n        holeIndices = [];\n      for (var vIdx = 1; vIdx < numPoints; vIdx++) {\n        if (!holesIdx.has(vIdx)) {\n          if (vIdx < firstHoleIdx) {\n            outerIndices.push(vIdx - 1, vIdx);\n          } else {\n            holeIndices.push(vIdx - 1 - firstHoleIdx, vIdx - firstHoleIdx);\n          }\n        }\n      }\n      var groups = [{\n        indices: outerIndices,\n        vertices: outerVertices\n      }];\n      if (holes.length) {\n        groups.push({\n          indices: holeIndices,\n          vertices: holeVertices\n        });\n      }\n      return groups;\n    }\n    function genMultiPolygon(coords, r) {\n      var outer = {\n        vertices: [],\n        indices: []\n      };\n      var holes = {\n        vertices: [],\n        indices: []\n      };\n      coords.map(function (c) {\n        return genPolygon(c, r);\n      }).forEach(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n          newOuter = _ref10[0],\n          newHoles = _ref10[1];\n        concatGroup(outer, newOuter);\n        newHoles && concatGroup(holes, newHoles);\n      });\n      var groups = [outer];\n      holes.vertices.length && groups.push(holes);\n      return groups;\n    }\n    return _this;\n  }\n  _inherits(GeoJsonGeometry, _THREE$BufferGeometry);\n  return _createClass(GeoJsonGeometry);\n}(THREE.BufferGeometry); //\nfunction concatGroup(main, extra) {\n  var prevVertCnt = Math.round(main.vertices.length / 3);\n  concatArr(main.vertices, extra.vertices);\n  concatArr(main.indices, extra.indices.map(function (ind) {\n    return ind + prevVertCnt;\n  }));\n}\nfunction concatArr(target, src) {\n  var _iterator = _createForOfIteratorHelper(src),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var e = _step.value;\n      target.push(e);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nfunction polar2Cartesian(lat, lng) {\n  var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var phi = (90 - lat) * Math.PI / 180;\n  var theta = (90 - lng) * Math.PI / 180;\n  return [r * Math.sin(phi) * Math.cos(theta),\n  // x\n  r * Math.cos(phi),\n  // y\n  r * Math.sin(phi) * Math.sin(theta) // z\n  ];\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhyZWUtZ2VvanNvbi1nZW9tZXRyeS9kaXN0L3RocmVlLWdlb2pzb24tZ2VvbWV0cnkubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUErRDtBQUM5QjtBQUNvQjtBQUNGOztBQUVuRDtBQUNBO0FBQ0EsZ0NBQWdDLE9BQU87QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RjtBQUN6RixJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFlBQVksa0VBQWtFO0FBQ3RGLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGtEQUFXO0FBQzVCO0FBQ0EsMEJBQTBCLGtEQUFjO0FBQ3hDLGlFQUFpRSwwREFBaUI7QUFDbEY7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLGlEQUFjO0FBQ2hDLDBCQUEwQix5REFBc0I7QUFDaEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCwyQkFBMkIsK0NBQU87QUFDbEM7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGtCQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTzs7QUFFUDtBQUNBLDRCQUE0QiwrQ0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0JBQXdCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw4QkFBOEI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXNDIiwic291cmNlcyI6WyIvVXNlcnMvc3VyYWpyYXdhdC9Eb3dubG9hZHMvVHJpcHkvbm9kZV9tb2R1bGVzL3RocmVlLWdlb2pzb24tZ2VvbWV0cnkvZGlzdC90aHJlZS1nZW9qc29uLWdlb21ldHJ5Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCdWZmZXJHZW9tZXRyeSwgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICdlYXJjdXQnO1xuaW1wb3J0IHsgZ2VvRGlzdGFuY2UsIGdlb0ludGVycG9sYXRlIH0gZnJvbSAnZDMtZ2VvJztcbmltcG9ydCB7IGludGVycG9sYXRlTnVtYmVyIH0gZnJvbSAnZDMtaW50ZXJwb2xhdGUnO1xuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSB7XG4gIChudWxsID09IGEgfHwgYSA+IHIubGVuZ3RoKSAmJiAoYSA9IHIubGVuZ3RoKTtcbiAgZm9yICh2YXIgZSA9IDAsIG4gPSBBcnJheShhKTsgZSA8IGE7IGUrKykgbltlXSA9IHJbZV07XG4gIHJldHVybiBuO1xufVxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKHIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocikpIHJldHVybiByO1xufVxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKHIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkocikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyKTtcbn1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoZSkge1xuICBpZiAodm9pZCAwID09PSBlKSB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIHJldHVybiBlO1xufVxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7XG4gIHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBbXSwgX2dldFByb3RvdHlwZU9mKHQpLmNvbnN0cnVjdG9yKSA6IG8uYXBwbHkodCwgZSkpO1xufVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGEsIG4pIHtcbiAgaWYgKCEoYSBpbnN0YW5jZW9mIG4pKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xufVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKGUsIHIsIHQpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6ICExXG4gIH0pLCBlO1xufVxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIociwgZSkge1xuICB2YXIgdCA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiByW1N5bWJvbC5pdGVyYXRvcl0gfHwgcltcIkBAaXRlcmF0b3JcIl07XG4gIGlmICghdCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHIpIHx8ICh0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIpKSB8fCBlKSB7XG4gICAgICB0ICYmIChyID0gdCk7XG4gICAgICB2YXIgbiA9IDAsXG4gICAgICAgIEYgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHM6IEYsXG4gICAgICAgIG46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gbiA+PSByLmxlbmd0aCA/IHtcbiAgICAgICAgICAgIGRvbmU6ICEwXG4gICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIGRvbmU6ICExLFxuICAgICAgICAgICAgdmFsdWU6IHJbbisrXVxuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGU6IGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgdGhyb3cgcjtcbiAgICAgICAgfSxcbiAgICAgICAgZjogRlxuICAgICAgfTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xuICB9XG4gIHZhciBvLFxuICAgIGEgPSAhMCxcbiAgICB1ID0gITE7XG4gIHJldHVybiB7XG4gICAgczogZnVuY3Rpb24gKCkge1xuICAgICAgdCA9IHQuY2FsbChyKTtcbiAgICB9LFxuICAgIG46IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByID0gdC5uZXh0KCk7XG4gICAgICByZXR1cm4gYSA9IHIuZG9uZSwgcjtcbiAgICB9LFxuICAgIGU6IGZ1bmN0aW9uIChyKSB7XG4gICAgICB1ID0gITAsIG8gPSByO1xuICAgIH0sXG4gICAgZjogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYSB8fCBudWxsID09IHQucmV0dXJuIHx8IHQucmV0dXJuKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAodSkgdGhyb3cgbztcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YodCkge1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtcbiAgfSwgX2dldFByb3RvdHlwZU9mKHQpO1xufVxuZnVuY3Rpb24gX2luaGVyaXRzKHQsIGUpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIHQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShlICYmIGUucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiB0LFxuICAgICAgd3JpdGFibGU6ICEwLFxuICAgICAgY29uZmlndXJhYmxlOiAhMFxuICAgIH1cbiAgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6ICExXG4gIH0pLCBlICYmIF9zZXRQcm90b3R5cGVPZih0LCBlKTtcbn1cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIHRyeSB7XG4gICAgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICB9IGNhdGNoICh0KSB7fVxuICByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhdDtcbiAgfSkoKTtcbn1cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkocikge1xuICBpZiAoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIG51bGwgIT0gcltTeW1ib2wuaXRlcmF0b3JdIHx8IG51bGwgIT0gcltcIkBAaXRlcmF0b3JcIl0pIHJldHVybiBBcnJheS5mcm9tKHIpO1xufVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHtcbiAgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKG51bGwgIT0gdCkge1xuICAgIHZhciBlLFxuICAgICAgbixcbiAgICAgIGksXG4gICAgICB1LFxuICAgICAgYSA9IFtdLFxuICAgICAgZiA9ICEwLFxuICAgICAgbyA9ICExO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaSA9ICh0ID0gdC5jYWxsKHIpKS5uZXh0LCAwID09PSBsKSB7XG4gICAgICAgIGlmIChPYmplY3QodCkgIT09IHQpIHJldHVybjtcbiAgICAgICAgZiA9ICExO1xuICAgICAgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApO1xuICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgIG8gPSAhMCwgbiA9IHI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghZiAmJiBudWxsICE9IHQucmV0dXJuICYmICh1ID0gdC5yZXR1cm4oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG8pIHRocm93IG47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG59XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHQsIGUpIHtcbiAgaWYgKGUgJiYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgfHwgXCJmdW5jdGlvblwiID09IHR5cGVvZiBlKSkgcmV0dXJuIGU7XG4gIGlmICh2b2lkIDAgIT09IGUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQodCk7XG59XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YodCwgZSkge1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgcmV0dXJuIHQuX19wcm90b19fID0gZSwgdDtcbiAgfSwgX3NldFByb3RvdHlwZU9mKHQsIGUpO1xufVxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkociwgZSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKHIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChyLCBlKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgZSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KHIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhyKSB8fCBfaXRlcmFibGVUb0FycmF5KHIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShyLCBhKSB7XG4gIGlmIChyKSB7XG4gICAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTtcbiAgICB2YXIgdCA9IHt9LnRvU3RyaW5nLmNhbGwocikuc2xpY2UoOCwgLTEpO1xuICAgIHJldHVybiBcIk9iamVjdFwiID09PSB0ICYmIHIuY29uc3RydWN0b3IgJiYgKHQgPSByLmNvbnN0cnVjdG9yLm5hbWUpLCBcIk1hcFwiID09PSB0IHx8IFwiU2V0XCIgPT09IHQgPyBBcnJheS5mcm9tKHIpIDogXCJBcmd1bWVudHNcIiA9PT0gdCB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KSA/IF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIDogdm9pZCAwO1xuICB9XG59XG5cbnZhciBpbnRlcnBvbGF0ZUxpbmUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZUxpbmUoKSB7XG4gIHZhciBsaW5lQ29vcmRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgdmFyIG1heERlZ0Rpc3RhbmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBwcmV2UG50ID0gbnVsbDtcbiAgbGluZUNvb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChwbnQpIHtcbiAgICBpZiAocHJldlBudCkge1xuICAgICAgdmFyIGRpc3QgPSBnZW9EaXN0YW5jZShwbnQsIHByZXZQbnQpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgIGlmIChkaXN0ID4gbWF4RGVnRGlzdGFuY2UpIHtcbiAgICAgICAgdmFyIGdlb0ludGVycG9sID0gZ2VvSW50ZXJwb2xhdGUocHJldlBudCwgcG50KTtcbiAgICAgICAgdmFyIGFsdEludGVycG9sID0gcHJldlBudC5sZW5ndGggPiAyIHx8IHBudC5sZW5ndGggPiAyID8gaW50ZXJwb2xhdGVOdW1iZXIocHJldlBudFsyXSB8fCAwLCBwbnRbMl0gfHwgMCkgOiBudWxsO1xuICAgICAgICB2YXIgaW50ZXJwb2wgPSBhbHRJbnRlcnBvbCA/IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZ2VvSW50ZXJwb2wodCkpLCBbYWx0SW50ZXJwb2wodCldKTtcbiAgICAgICAgfSA6IGdlb0ludGVycG9sO1xuICAgICAgICB2YXIgdFN0ZXAgPSAxIC8gTWF0aC5jZWlsKGRpc3QgLyBtYXhEZWdEaXN0YW5jZSk7XG4gICAgICAgIHZhciB0ID0gdFN0ZXA7XG4gICAgICAgIHdoaWxlICh0IDwgMSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGludGVycG9sKHQpKTtcbiAgICAgICAgICB0ICs9IHRTdGVwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKHByZXZQbnQgPSBwbnQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBUSFJFRSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5USFJFRSA/IHdpbmRvdy5USFJFRSAvLyBQcmVmZXIgY29uc3VtcHRpb24gZnJvbSBnbG9iYWwgVEhSRUUsIGlmIGV4aXN0c1xuOiB7XG4gIEJ1ZmZlckdlb21ldHJ5OiBCdWZmZXJHZW9tZXRyeSxcbiAgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZTogRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZVxufTtcblxuLy8gc3VwcG9ydCBib3RoIG1vZGVzIGZvciBiYWNrd2FyZHMgdGhyZWVqcyBjb21wYXRpYmlsaXR5XG52YXIgc2V0QXR0cmlidXRlRm4gPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKS5zZXRBdHRyaWJ1dGUgPyAnc2V0QXR0cmlidXRlJyA6ICdhZGRBdHRyaWJ1dGUnO1xudmFyIEdlb0pzb25HZW9tZXRyeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1RIUkVFJEJ1ZmZlckdlb21ldHJ5KSB7XG4gIGZ1bmN0aW9uIEdlb0pzb25HZW9tZXRyeShnZW9Kc29uKSB7XG4gICAgdmFyIF90aGlzO1xuICAgIHZhciByYWRpdXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gICAgdmFyIHJlc29sdXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDU7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdlb0pzb25HZW9tZXRyeSk7XG4gICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIEdlb0pzb25HZW9tZXRyeSk7XG4gICAgX3RoaXMudHlwZSA9ICdHZW9Kc29uR2VvbWV0cnknO1xuICAgIF90aGlzLnBhcmFtZXRlcnMgPSB7XG4gICAgICBnZW9Kc29uOiBnZW9Kc29uLFxuICAgICAgcmFkaXVzOiByYWRpdXMsXG4gICAgICByZXNvbHV0aW9uOiByZXNvbHV0aW9uXG4gICAgfTtcblxuICAgIC8vIHByb2Nlc3MgdmFyaW91cyBnZW9tZXRyeSB0eXBlc1xuICAgIHZhciBncm91cHMgPSAoe1xuICAgICAgUG9pbnQ6IGdlblBvaW50LFxuICAgICAgTXVsdGlQb2ludDogZ2VuTXVsdGlQb2ludCxcbiAgICAgIExpbmVTdHJpbmc6IGdlbkxpbmVTdHJpbmcsXG4gICAgICBNdWx0aUxpbmVTdHJpbmc6IGdlbk11bHRpTGluZVN0cmluZyxcbiAgICAgIFBvbHlnb246IGdlblBvbHlnb24sXG4gICAgICBNdWx0aVBvbHlnb246IGdlbk11bHRpUG9seWdvblxuICAgIH1bZ2VvSnNvbi50eXBlXSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfSkoZ2VvSnNvbi5jb29yZGluYXRlcywgcmFkaXVzKTtcblxuICAgIC8vIGNvbmNhdCBncm91cHNcbiAgICB2YXIgaW5kaWNlcyA9IFtdLFxuICAgICAgdmVydGljZXMgPSBbXTtcbiAgICB2YXIgZ3JvdXBDbnQgPSAwO1xuICAgIGdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChuZXdHKSB7XG4gICAgICB2YXIgcHJldkluZENudCA9IGluZGljZXMubGVuZ3RoO1xuICAgICAgY29uY2F0R3JvdXAoe1xuICAgICAgICBpbmRpY2VzOiBpbmRpY2VzLFxuICAgICAgICB2ZXJ0aWNlczogdmVydGljZXNcbiAgICAgIH0sIG5ld0cpO1xuICAgICAgX3RoaXMuYWRkR3JvdXAocHJldkluZENudCwgaW5kaWNlcy5sZW5ndGggLSBwcmV2SW5kQ250LCBncm91cENudCsrKTtcbiAgICB9KTtcblxuICAgIC8vIGJ1aWxkIGdlb21ldHJ5XG4gICAgaW5kaWNlcy5sZW5ndGggJiYgX3RoaXMuc2V0SW5kZXgoaW5kaWNlcyk7XG4gICAgdmVydGljZXMubGVuZ3RoICYmIF90aGlzW3NldEF0dHJpYnV0ZUZuXSgncG9zaXRpb24nLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh2ZXJ0aWNlcywgMykpO1xuXG4gICAgLy9cblxuICAgIGZ1bmN0aW9uIGdlblBvaW50KGNvb3Jkcywgcikge1xuICAgICAgdmFyIHZlcnRpY2VzID0gcG9sYXIyQ2FydGVzaWFuKGNvb3Jkc1sxXSwgY29vcmRzWzBdLCByICsgKGNvb3Jkc1syXSB8fCAwKSk7XG4gICAgICB2YXIgaW5kaWNlcyA9IFtdO1xuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIHZlcnRpY2VzOiB2ZXJ0aWNlcyxcbiAgICAgICAgaW5kaWNlczogaW5kaWNlc1xuICAgICAgfV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdlbk11bHRpUG9pbnQoY29vcmRzLCByKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICB2ZXJ0aWNlczogW10sXG4gICAgICAgIGluZGljZXM6IFtdXG4gICAgICB9O1xuICAgICAgY29vcmRzLm1hcChmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gZ2VuUG9pbnQoYywgcik7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDEpLFxuICAgICAgICAgIG5ld1BudCA9IF9yZWYyWzBdO1xuICAgICAgICBjb25jYXRHcm91cChyZXN1bHQsIG5ld1BudCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBbcmVzdWx0XTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2VuTGluZVN0cmluZyhjb29yZHMsIHIpIHtcbiAgICAgIHZhciBjb29yZHMzZCA9IGludGVycG9sYXRlTGluZShjb29yZHMsIHJlc29sdXRpb24pLm1hcChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgdmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDMpLFxuICAgICAgICAgIGxuZyA9IF9yZWY0WzBdLFxuICAgICAgICAgIGxhdCA9IF9yZWY0WzFdLFxuICAgICAgICAgIF9yZWY0JCA9IF9yZWY0WzJdLFxuICAgICAgICAgIGFsdCA9IF9yZWY0JCA9PT0gdm9pZCAwID8gMCA6IF9yZWY0JDtcbiAgICAgICAgcmV0dXJuIHBvbGFyMkNhcnRlc2lhbihsYXQsIGxuZywgciArIGFsdCk7XG4gICAgICB9KTtcbiAgICAgIHZhciBfZWFyY3V0RmxhdHRlbiA9IGZsYXR0ZW4oW2Nvb3JkczNkXSksXG4gICAgICAgIHZlcnRpY2VzID0gX2VhcmN1dEZsYXR0ZW4udmVydGljZXM7XG4gICAgICB2YXIgbnVtUG9pbnRzID0gTWF0aC5yb3VuZCh2ZXJ0aWNlcy5sZW5ndGggLyAzKTtcbiAgICAgIHZhciBpbmRpY2VzID0gW107XG4gICAgICBmb3IgKHZhciB2SWR4ID0gMTsgdklkeCA8IG51bVBvaW50czsgdklkeCsrKSB7XG4gICAgICAgIGluZGljZXMucHVzaCh2SWR4IC0gMSwgdklkeCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgdmVydGljZXM6IHZlcnRpY2VzLFxuICAgICAgICBpbmRpY2VzOiBpbmRpY2VzXG4gICAgICB9XTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2VuTXVsdGlMaW5lU3RyaW5nKGNvb3Jkcywgcikge1xuICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgdmVydGljZXM6IFtdLFxuICAgICAgICBpbmRpY2VzOiBbXVxuICAgICAgfTtcbiAgICAgIGNvb3Jkcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIGdlbkxpbmVTdHJpbmcoYywgcik7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmNSkge1xuICAgICAgICB2YXIgX3JlZjYgPSBfc2xpY2VkVG9BcnJheShfcmVmNSwgMSksXG4gICAgICAgICAgbmV3TGluZSA9IF9yZWY2WzBdO1xuICAgICAgICBjb25jYXRHcm91cChyZXN1bHQsIG5ld0xpbmUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gW3Jlc3VsdF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdlblBvbHlnb24oY29vcmRzLCByKSB7XG4gICAgICB2YXIgY29vcmRzM2QgPSBjb29yZHMubWFwKGZ1bmN0aW9uIChjb29yZHNTZWdtZW50KSB7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0ZUxpbmUoY29vcmRzU2VnbWVudCwgcmVzb2x1dGlvbikubWFwKGZ1bmN0aW9uIChfcmVmNykge1xuICAgICAgICAgIHZhciBfcmVmOCA9IF9zbGljZWRUb0FycmF5KF9yZWY3LCAzKSxcbiAgICAgICAgICAgIGxuZyA9IF9yZWY4WzBdLFxuICAgICAgICAgICAgbGF0ID0gX3JlZjhbMV0sXG4gICAgICAgICAgICBfcmVmOCQgPSBfcmVmOFsyXSxcbiAgICAgICAgICAgIGFsdCA9IF9yZWY4JCA9PT0gdm9pZCAwID8gMCA6IF9yZWY4JDtcbiAgICAgICAgICByZXR1cm4gcG9sYXIyQ2FydGVzaWFuKGxhdCwgbG5nLCByICsgYWx0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gRWFjaCBwb2ludCBnZW5lcmF0ZXMgMyB2ZXJ0aWNlIGl0ZW1zICh4LHkseikuXG4gICAgICB2YXIgX2VhcmN1dEZsYXR0ZW4yID0gZmxhdHRlbihjb29yZHMzZCksXG4gICAgICAgIHZlcnRpY2VzID0gX2VhcmN1dEZsYXR0ZW4yLnZlcnRpY2VzLFxuICAgICAgICBob2xlcyA9IF9lYXJjdXRGbGF0dGVuMi5ob2xlcztcbiAgICAgIHZhciBmaXJzdEhvbGVJZHggPSBob2xlc1swXSB8fCBJbmZpbml0eTtcbiAgICAgIHZhciBvdXRlclZlcnRpY2VzID0gdmVydGljZXMuc2xpY2UoMCwgZmlyc3RIb2xlSWR4ICogMyk7XG4gICAgICB2YXIgaG9sZVZlcnRpY2VzID0gdmVydGljZXMuc2xpY2UoZmlyc3RIb2xlSWR4ICogMyk7XG4gICAgICB2YXIgaG9sZXNJZHggPSBuZXcgU2V0KGhvbGVzKTtcbiAgICAgIHZhciBudW1Qb2ludHMgPSBNYXRoLnJvdW5kKHZlcnRpY2VzLmxlbmd0aCAvIDMpO1xuICAgICAgdmFyIG91dGVySW5kaWNlcyA9IFtdLFxuICAgICAgICBob2xlSW5kaWNlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgdklkeCA9IDE7IHZJZHggPCBudW1Qb2ludHM7IHZJZHgrKykge1xuICAgICAgICBpZiAoIWhvbGVzSWR4Lmhhcyh2SWR4KSkge1xuICAgICAgICAgIGlmICh2SWR4IDwgZmlyc3RIb2xlSWR4KSB7XG4gICAgICAgICAgICBvdXRlckluZGljZXMucHVzaCh2SWR4IC0gMSwgdklkeCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhvbGVJbmRpY2VzLnB1c2godklkeCAtIDEgLSBmaXJzdEhvbGVJZHgsIHZJZHggLSBmaXJzdEhvbGVJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGdyb3VwcyA9IFt7XG4gICAgICAgIGluZGljZXM6IG91dGVySW5kaWNlcyxcbiAgICAgICAgdmVydGljZXM6IG91dGVyVmVydGljZXNcbiAgICAgIH1dO1xuICAgICAgaWYgKGhvbGVzLmxlbmd0aCkge1xuICAgICAgICBncm91cHMucHVzaCh7XG4gICAgICAgICAgaW5kaWNlczogaG9sZUluZGljZXMsXG4gICAgICAgICAgdmVydGljZXM6IGhvbGVWZXJ0aWNlc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBncm91cHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdlbk11bHRpUG9seWdvbihjb29yZHMsIHIpIHtcbiAgICAgIHZhciBvdXRlciA9IHtcbiAgICAgICAgdmVydGljZXM6IFtdLFxuICAgICAgICBpbmRpY2VzOiBbXVxuICAgICAgfTtcbiAgICAgIHZhciBob2xlcyA9IHtcbiAgICAgICAgdmVydGljZXM6IFtdLFxuICAgICAgICBpbmRpY2VzOiBbXVxuICAgICAgfTtcbiAgICAgIGNvb3Jkcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIGdlblBvbHlnb24oYywgcik7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmOSkge1xuICAgICAgICB2YXIgX3JlZjEwID0gX3NsaWNlZFRvQXJyYXkoX3JlZjksIDIpLFxuICAgICAgICAgIG5ld091dGVyID0gX3JlZjEwWzBdLFxuICAgICAgICAgIG5ld0hvbGVzID0gX3JlZjEwWzFdO1xuICAgICAgICBjb25jYXRHcm91cChvdXRlciwgbmV3T3V0ZXIpO1xuICAgICAgICBuZXdIb2xlcyAmJiBjb25jYXRHcm91cChob2xlcywgbmV3SG9sZXMpO1xuICAgICAgfSk7XG4gICAgICB2YXIgZ3JvdXBzID0gW291dGVyXTtcbiAgICAgIGhvbGVzLnZlcnRpY2VzLmxlbmd0aCAmJiBncm91cHMucHVzaChob2xlcyk7XG4gICAgICByZXR1cm4gZ3JvdXBzO1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgX2luaGVyaXRzKEdlb0pzb25HZW9tZXRyeSwgX1RIUkVFJEJ1ZmZlckdlb21ldHJ5KTtcbiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhHZW9Kc29uR2VvbWV0cnkpO1xufShUSFJFRS5CdWZmZXJHZW9tZXRyeSk7IC8vXG5mdW5jdGlvbiBjb25jYXRHcm91cChtYWluLCBleHRyYSkge1xuICB2YXIgcHJldlZlcnRDbnQgPSBNYXRoLnJvdW5kKG1haW4udmVydGljZXMubGVuZ3RoIC8gMyk7XG4gIGNvbmNhdEFycihtYWluLnZlcnRpY2VzLCBleHRyYS52ZXJ0aWNlcyk7XG4gIGNvbmNhdEFycihtYWluLmluZGljZXMsIGV4dHJhLmluZGljZXMubWFwKGZ1bmN0aW9uIChpbmQpIHtcbiAgICByZXR1cm4gaW5kICsgcHJldlZlcnRDbnQ7XG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGNvbmNhdEFycih0YXJnZXQsIHNyYykge1xuICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoc3JjKSxcbiAgICBfc3RlcDtcbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgdmFyIGUgPSBfc3RlcC52YWx1ZTtcbiAgICAgIHRhcmdldC5wdXNoKGUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBfaXRlcmF0b3IuZigpO1xuICB9XG59XG5mdW5jdGlvbiBwb2xhcjJDYXJ0ZXNpYW4obGF0LCBsbmcpIHtcbiAgdmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7XG4gIHZhciBwaGkgPSAoOTAgLSBsYXQpICogTWF0aC5QSSAvIDE4MDtcbiAgdmFyIHRoZXRhID0gKDkwIC0gbG5nKSAqIE1hdGguUEkgLyAxODA7XG4gIHJldHVybiBbciAqIE1hdGguc2luKHBoaSkgKiBNYXRoLmNvcyh0aGV0YSksXG4gIC8vIHhcbiAgciAqIE1hdGguY29zKHBoaSksXG4gIC8vIHlcbiAgciAqIE1hdGguc2luKHBoaSkgKiBNYXRoLnNpbih0aGV0YSkgLy8gelxuICBdO1xufVxuXG5leHBvcnQgeyBHZW9Kc29uR2VvbWV0cnkgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-geojson-geometry/dist/three-geojson-geometry.mjs\n");

/***/ })

};
;