"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-slippy-map-globe";
exports.ids = ["vendor-chunks/three-slippy-map-globe"];
exports.modules = {

/***/ "(ssr)/./node_modules/three-slippy-map-globe/dist/three-slippy-map-globe.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/three-slippy-map-globe/dist/three-slippy-map-globe.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ThreeSlippyMapGlobe)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var d3_octree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-octree */ \"(ssr)/./node_modules/d3-octree/src/octree.js\");\n/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-scale */ \"(ssr)/./node_modules/d3-scale/src/linear.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/projection/mercator.js\");\n\n\n\n\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nfunction _assertThisInitialized(e) {\n  if (undefined === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _classPrivateFieldGet2(s, a) {\n  return s.get(_assertClassBrand(s, a));\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n  _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _classPrivateFieldSet2(s, a, r) {\n  return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _classPrivateMethodInitSpec(e, a) {\n  _checkPrivateRedeclaration(e, a), a.add(e);\n}\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || false, o.configurable = true, \"value\" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return _defineProperties(e.prototype, r), Object.defineProperty(e, \"prototype\", {\n    writable: false\n  }), e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: true,\n    configurable: true,\n    writable: true\n  }) : e[r] = t, e;\n}\nfunction _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: true,\n      configurable: true\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: false\n  }), e && _setPrototypeOf(t, e);\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = true,\n      o = false;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = true, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n  if (undefined !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return _assertThisInitialized(t);\n}\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nfunction _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (undefined !== e) {\n    var i = e.call(t, r);\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (String )(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : undefined;\n  }\n}\n\nvar _materialDispose = function materialDispose(material) {\n  if (material instanceof Array) {\n    material.forEach(_materialDispose);\n  } else {\n    if (material.map) {\n      material.map.dispose();\n    }\n    material.dispose();\n  }\n};\nvar _deallocate = function deallocate(obj) {\n  if (obj.geometry) {\n    obj.geometry.dispose();\n  }\n  if (obj.material) {\n    _materialDispose(obj.material);\n  }\n  if (obj.texture) {\n    obj.texture.dispose();\n  }\n  if (obj.children) {\n    obj.children.forEach(_deallocate);\n  }\n};\nvar emptyObject = function emptyObject(obj) {\n  if (obj && obj.children) while (obj.children.length) {\n    var childObj = obj.children[0];\n    obj.remove(childObj);\n    _deallocate(childObj);\n  }\n};\n\nfunction polar2Cartesian(lat, lng, r) {\n  var phi = (90 - lat) * Math.PI / 180;\n  var theta = (90 - lng) * Math.PI / 180;\n  return {\n    x: r * Math.sin(phi) * Math.cos(theta),\n    y: r * Math.cos(phi),\n    z: r * Math.sin(phi) * Math.sin(theta)\n  };\n}\nfunction cartesian2Polar(_ref) {\n  var x = _ref.x,\n    y = _ref.y,\n    z = _ref.z;\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var phi = Math.acos(y / r);\n  var theta = Math.atan2(z, x);\n  return {\n    lat: 90 - phi * 180 / Math.PI,\n    lng: 90 - theta * 180 / Math.PI - (theta < -Math.PI / 2 ? 360 : 0),\n    // keep within [-180, 180] boundaries\n    r: r\n  };\n}\nfunction deg2Rad(deg) {\n  return deg * Math.PI / 180;\n}\n\nvar yMercatorScale = function yMercatorScale(y) {\n  return 1 - ((0,d3_geo__WEBPACK_IMPORTED_MODULE_0__.mercatorRaw)(0, (0.5 - y) * Math.PI)[1] / Math.PI + 1) / 2;\n};\nvar yMercatorScaleClamped = function yMercatorScaleClamped(y) {\n  return Math.max(0, Math.min(1, yMercatorScale(y)));\n};\nvar yMercatorScaleInvert = function yMercatorScaleInvert(y) {\n  return 0.5 - d3_geo__WEBPACK_IMPORTED_MODULE_0__.mercatorRaw.invert(0, (2 * (1 - y) - 1) * Math.PI)[1] / Math.PI;\n};\nvar convertMercatorUV = function convertMercatorUV(uvs) {\n  var y0 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var y1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var offsetScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().domain([1, 0]).range([y0, y1]).clamp(true);\n  var revOffsetScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().domain([yMercatorScaleClamped(y0), yMercatorScaleClamped(y1)]).range([1, 0]).clamp(true);\n  var scale = function scale(v) {\n    return revOffsetScale(yMercatorScaleClamped(offsetScale(v)));\n  };\n  var arr = uvs.array;\n  for (var i = 0, len = arr.length; i < len; i += 2) {\n    arr[i + 1] = scale(arr[i + 1]);\n  }\n  uvs.needsUpdate = true;\n};\n\nvar findTileXY = function findTileXY(level, isMercator, lng, lat) {\n  var gridSize = Math.pow(2, level);\n  var x = Math.max(0, Math.min(gridSize - 1, Math.floor((lng + 180) * gridSize / 360)));\n  var relY = (90 - lat) / 180;\n  isMercator && (relY = Math.max(0, Math.min(1, yMercatorScale(relY))));\n  var y = Math.floor(relY * gridSize);\n  return [x, y];\n};\nvar genTilesCoords = function genTilesCoords(level, isMercator) {\n  var x0 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var y0 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var _x1 = arguments.length > 4 ? arguments[4] : undefined;\n  var _y1 = arguments.length > 5 ? arguments[5] : undefined;\n  var tiles = [];\n  var gridSize = Math.pow(2, level);\n  var tileLngLen = 360 / gridSize;\n  var regTileLatLen = 180 / gridSize;\n  var x1 = _x1 === undefined ? gridSize - 1 : _x1;\n  var y1 = _y1 === undefined ? gridSize - 1 : _y1;\n  for (var x = x0, maxX = Math.min(gridSize - 1, x1); x <= maxX; x++) {\n    for (var y = y0, maxY = Math.min(gridSize - 1, y1); y <= maxY; y++) {\n      var reproY = y,\n        tileLatLen = regTileLatLen;\n      if (isMercator) {\n        // lat needs reprojection, but stretch to cover poles\n        reproY = y === 0 ? y : yMercatorScaleInvert(y / gridSize) * gridSize;\n        var reproYEnd = y + 1 === gridSize ? y + 1 : yMercatorScaleInvert((y + 1) / gridSize) * gridSize;\n        tileLatLen = (reproYEnd - reproY) * 180 / gridSize;\n      }\n\n      // tile centroid coordinates\n      var lng = -180 + (x + 0.5) * tileLngLen;\n      var lat = 90 - (reproY * 180 / gridSize + tileLatLen / 2);\n      var latLen = tileLatLen; // lng is always constant among all tiles\n\n      tiles.push({\n        x: x,\n        y: y,\n        lng: lng,\n        lat: lat,\n        latLen: latLen\n      });\n    }\n  }\n  return tiles;\n};\n\nvar MAX_LEVEL_TO_RENDER_ALL_TILES = 6; // level 6 = 4096 tiles\nvar MAX_LEVEL_TO_BUILD_LOOKUP_OCTREE = 7; // octrees consume too much memory on higher levels, generate tiles on demand for those (based on globe surface distance) as the distortion is negligible\nvar TILE_SEARCH_RADIUS_CAMERA_DISTANCE = 3; // Euclidean distance factor, in units of camera distance to surface\nvar TILE_SEARCH_RADIUS_SURFACE_DISTANCE = 90; // in degrees on the globe surface, relative to camera altitude in globe radius units\nvar _radius = /*#__PURE__*/new WeakMap();\nvar _isMercator = /*#__PURE__*/new WeakMap();\nvar _tileUrl = /*#__PURE__*/new WeakMap();\nvar _level = /*#__PURE__*/new WeakMap();\nvar _tilesMeta = /*#__PURE__*/new WeakMap();\nvar _isInView = /*#__PURE__*/new WeakMap();\nvar _camera = /*#__PURE__*/new WeakMap();\nvar _innerBackLayer = /*#__PURE__*/new WeakMap();\nvar _ThreeSlippyMapGlobe_brand = /*#__PURE__*/new WeakSet();\nvar ThreeSlippyMapGlobe = /*#__PURE__*/function (_Group) {\n  function ThreeSlippyMapGlobe(radius) {\n    var _this;\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      tileUrl = _ref.tileUrl,\n      _ref$minLevel = _ref.minLevel,\n      minLevel = _ref$minLevel === undefined ? 0 : _ref$minLevel,\n      _ref$maxLevel = _ref.maxLevel,\n      maxLevel = _ref$maxLevel === undefined ? 17 : _ref$maxLevel,\n      _ref$mercatorProjecti = _ref.mercatorProjection,\n      mercatorProjection = _ref$mercatorProjecti === undefined ? true : _ref$mercatorProjecti;\n    _classCallCheck(this, ThreeSlippyMapGlobe);\n    _this = _callSuper(this, ThreeSlippyMapGlobe);\n    // Private methods\n    _classPrivateMethodInitSpec(_this, _ThreeSlippyMapGlobe_brand);\n    // Private attributes\n    _classPrivateFieldInitSpec(_this, _radius, undefined);\n    _classPrivateFieldInitSpec(_this, _isMercator, undefined);\n    _classPrivateFieldInitSpec(_this, _tileUrl, undefined);\n    _classPrivateFieldInitSpec(_this, _level, undefined);\n    _classPrivateFieldInitSpec(_this, _tilesMeta, {});\n    _classPrivateFieldInitSpec(_this, _isInView, undefined);\n    _classPrivateFieldInitSpec(_this, _camera, undefined);\n    _classPrivateFieldInitSpec(_this, _innerBackLayer, undefined);\n    _defineProperty(_this, \"minLevel\", undefined);\n    _defineProperty(_this, \"maxLevel\", undefined);\n    _defineProperty(_this, \"thresholds\", _toConsumableArray(new Array(30)).map(function (_, idx) {\n      return 8 / Math.pow(2, idx);\n    }));\n    // in terms of radius units\n    _defineProperty(_this, \"curvatureResolution\", 5);\n    // in degrees, affects number of vertices in tiles\n    _defineProperty(_this, \"tileMargin\", 0);\n    _defineProperty(_this, \"clearTiles\", function () {\n      Object.values(_classPrivateFieldGet2(_tilesMeta, _this)).forEach(function (l) {\n        l.forEach(function (d) {\n          if (d.obj) {\n            _this.remove(d.obj);\n            emptyObject(d.obj);\n            delete d.obj;\n          }\n        });\n      });\n      _classPrivateFieldSet2(_tilesMeta, _this, {});\n    });\n    _classPrivateFieldSet2(_radius, _this, radius);\n    _this.tileUrl = tileUrl;\n    _classPrivateFieldSet2(_isMercator, _this, mercatorProjection);\n    _this.minLevel = minLevel;\n    _this.maxLevel = maxLevel;\n    _this.level = 0;\n\n    // Add protective black sphere just below surface to prevent any depth buffer anomalies\n    _this.add(_classPrivateFieldSet2(_innerBackLayer, _this, new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(_classPrivateFieldGet2(_radius, _this) * 0.99, 180, 90), new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n      color: 0x0\n    }))));\n    _classPrivateFieldGet2(_innerBackLayer, _this).visible = false;\n    _classPrivateFieldGet2(_innerBackLayer, _this).material.polygonOffset = true;\n    _classPrivateFieldGet2(_innerBackLayer, _this).material.polygonOffsetUnits = 3;\n    _classPrivateFieldGet2(_innerBackLayer, _this).material.polygonOffsetFactor = 1;\n    return _this;\n  }\n  _inherits(ThreeSlippyMapGlobe, _Group);\n  return _createClass(ThreeSlippyMapGlobe, [{\n    key: \"tileUrl\",\n    get:\n    // Public attributes\n    function get() {\n      return _classPrivateFieldGet2(_tileUrl, this);\n    },\n    set: function set(tileUrl) {\n      _classPrivateFieldSet2(_tileUrl, this, tileUrl);\n      this.updatePov(_classPrivateFieldGet2(_camera, this)); // update current view\n    }\n  }, {\n    key: \"level\",\n    get: function get() {\n      return _classPrivateFieldGet2(_level, this);\n    },\n    set: function set(level) {\n      var _this2 = this;\n      if (!_classPrivateFieldGet2(_tilesMeta, this)[level]) _assertClassBrand(_ThreeSlippyMapGlobe_brand, this, _buildMetaLevel).call(this, level);\n      var prevLevel = _classPrivateFieldGet2(_level, this);\n      _classPrivateFieldSet2(_level, this, level);\n      if (level === prevLevel || prevLevel === undefined) return; // nothing else to do\n\n      // Activate back layer for levels > 0, when there's !depthWrite tiles\n      _classPrivateFieldGet2(_innerBackLayer, this).visible = level > 0;\n\n      // Bring layer to front\n      _classPrivateFieldGet2(_tilesMeta, this)[level].forEach(function (d) {\n        return d.obj && (d.obj.material.depthWrite = true);\n      });\n\n      // push lower layers to background\n      prevLevel < level && _classPrivateFieldGet2(_tilesMeta, this)[prevLevel].forEach(function (d) {\n        return d.obj && (d.obj.material.depthWrite = false);\n      });\n\n      // Remove upper layers\n      if (prevLevel > level) {\n        for (var l = level + 1; l <= prevLevel; l++) {\n          _classPrivateFieldGet2(_tilesMeta, this)[l] && _classPrivateFieldGet2(_tilesMeta, this)[l].forEach(function (d) {\n            if (d.obj) {\n              _this2.remove(d.obj);\n              emptyObject(d.obj);\n              delete d.obj;\n            }\n          });\n        }\n      }\n      _assertClassBrand(_ThreeSlippyMapGlobe_brand, this, _fetchNeededTiles).call(this);\n    }\n\n    // Public methods\n  }, {\n    key: \"updatePov\",\n    value: function updatePov(camera) {\n      var _this3 = this;\n      if (!camera || !(camera instanceof three__WEBPACK_IMPORTED_MODULE_2__.Camera)) return;\n      _classPrivateFieldSet2(_camera, this, camera);\n      var frustum;\n      _classPrivateFieldSet2(_isInView, this, function (d) {\n        if (!d.hullPnts) {\n          // cached for next time to improve performance\n          var lngLen = 360 / Math.pow(2, _this3.level);\n          var lng = d.lng,\n            lat = d.lat,\n            latLen = d.latLen;\n          var lng0 = lng - lngLen / 2;\n          var lng1 = lng + lngLen / 2;\n          var lat0 = lat - latLen / 2;\n          var lat1 = lat + latLen / 2;\n          d.hullPnts = [[lat, lng], [lat0, lng0], [lat1, lng0], [lat0, lng1], [lat1, lng1]].map(function (_ref2) {\n            var _ref3 = _slicedToArray(_ref2, 2),\n              lat = _ref3[0],\n              lng = _ref3[1];\n            return polar2Cartesian(lat, lng, _classPrivateFieldGet2(_radius, _this3));\n          }).map(function (_ref4) {\n            var x = _ref4.x,\n              y = _ref4.y,\n              z = _ref4.z;\n            return new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(x, y, z);\n          });\n        }\n        if (!frustum) {\n          frustum = new three__WEBPACK_IMPORTED_MODULE_2__.Frustum();\n          camera.updateMatrix();\n          camera.updateMatrixWorld();\n          frustum.setFromProjectionMatrix(new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4().multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse));\n        }\n        return d.hullPnts.some(function (pos) {\n          return frustum.containsPoint(pos.clone().applyMatrix4(_this3.matrixWorld));\n        });\n      });\n      if (this.tileUrl) {\n        var pov = camera.position.clone();\n        var distToGlobeCenter = pov.distanceTo(this.getWorldPosition(new three__WEBPACK_IMPORTED_MODULE_2__.Vector3()));\n        var cameraDistance = (distToGlobeCenter - _classPrivateFieldGet2(_radius, this)) / _classPrivateFieldGet2(_radius, this); // in units of globe radius\n\n        var idx = this.thresholds.findIndex(function (t) {\n          return t && t <= cameraDistance;\n        });\n        this.level = Math.min(this.maxLevel, Math.max(this.minLevel, idx < 0 ? this.thresholds.length : idx));\n        _assertClassBrand(_ThreeSlippyMapGlobe_brand, this, _fetchNeededTiles).call(this);\n      }\n    }\n  }]);\n}(three__WEBPACK_IMPORTED_MODULE_2__.Group);\nfunction _buildMetaLevel(level) {\n  var _this4 = this;\n  if (level > MAX_LEVEL_TO_BUILD_LOOKUP_OCTREE) {\n    // Generate meta dynamically\n    _classPrivateFieldGet2(_tilesMeta, this)[level] = [];\n    return;\n  }\n\n  // Generate distance lookup octree\n  var levelMeta = _classPrivateFieldGet2(_tilesMeta, this)[level] = genTilesCoords(level, _classPrivateFieldGet2(_isMercator, this));\n  levelMeta.forEach(function (d) {\n    return d.centroid = polar2Cartesian(d.lat, d.lng, _classPrivateFieldGet2(_radius, _this4));\n  });\n  levelMeta.octree = (0,d3_octree__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().x(function (d) {\n    return d.centroid.x;\n  }).y(function (d) {\n    return d.centroid.y;\n  }).z(function (d) {\n    return d.centroid.z;\n  }).addAll(levelMeta);\n}\nfunction _fetchNeededTiles() {\n  var _this5 = this;\n  if (!this.tileUrl || this.level === undefined || !_classPrivateFieldGet2(_tilesMeta, this).hasOwnProperty(this.level)) return;\n\n  // Safety if can't check in view tiles for higher levels\n  if (!_classPrivateFieldGet2(_isInView, this) && this.level > MAX_LEVEL_TO_RENDER_ALL_TILES) return;\n  var tiles = _classPrivateFieldGet2(_tilesMeta, this)[this.level];\n  if (_classPrivateFieldGet2(_camera, this)) {\n    // Pre-select tiles close to the camera\n    var povPos = this.worldToLocal(_classPrivateFieldGet2(_camera, this).position.clone());\n    if (tiles.octree) {\n      var _tiles$octree;\n      // Octree based on 3d positions is more accurate\n      var _povPos = this.worldToLocal(_classPrivateFieldGet2(_camera, this).position.clone());\n      var searchRadius = (_povPos.length() - _classPrivateFieldGet2(_radius, this)) * TILE_SEARCH_RADIUS_CAMERA_DISTANCE;\n      tiles = (_tiles$octree = tiles.octree).findAllWithinRadius.apply(_tiles$octree, _toConsumableArray(_povPos).concat([searchRadius]));\n    } else {\n      // tiles populated dynamically\n      var povCoords = cartesian2Polar(povPos);\n      var searchRadiusLat = (povCoords.r / _classPrivateFieldGet2(_radius, this) - 1) * TILE_SEARCH_RADIUS_SURFACE_DISTANCE;\n      var searchRadiusLng = searchRadiusLat / Math.cos(deg2Rad(povCoords.lat)); // Distances in longitude degrees shrink towards the poles\n      var lngRange = [povCoords.lng - searchRadiusLng, povCoords.lng + searchRadiusLng];\n      var latRange = [povCoords.lat + searchRadiusLat, povCoords.lat - searchRadiusLat];\n      var _findTileXY = findTileXY(this.level, _classPrivateFieldGet2(_isMercator, this), lngRange[0], latRange[0]),\n        _findTileXY2 = _slicedToArray(_findTileXY, 2),\n        x0 = _findTileXY2[0],\n        y0 = _findTileXY2[1];\n      var _findTileXY3 = findTileXY(this.level, _classPrivateFieldGet2(_isMercator, this), lngRange[1], latRange[1]),\n        _findTileXY4 = _slicedToArray(_findTileXY3, 2),\n        x1 = _findTileXY4[0],\n        y1 = _findTileXY4[1];\n      !tiles.record && (tiles.record = {}); // Index gen tiles by XY\n      var r = tiles.record;\n      if (!r.hasOwnProperty(\"\".concat(Math.round((x0 + x1) / 2), \"_\").concat(Math.round((y0 + y1) / 2)))) {\n        // gen all found tiles if middle one is not in record\n        tiles = genTilesCoords(this.level, _classPrivateFieldGet2(_isMercator, this), x0, y0, x1, y1).map(function (d) {\n          var k = \"\".concat(d.x, \"_\").concat(d.y);\n          if (r.hasOwnProperty(k)) return r[k];\n          r[k] = d;\n          tiles.push(d);\n          return d;\n        });\n      } else {\n        // gen only those missing, one by one\n        var selTiles = [];\n        for (var x = x0; x <= x1; x++) {\n          for (var y = y0; y <= y1; y++) {\n            var k = \"\".concat(x, \"_\").concat(y);\n            if (!r.hasOwnProperty(k)) {\n              r[k] = genTilesCoords(this.level, _classPrivateFieldGet2(_isMercator, this), x, y, x, y)[0];\n              tiles.push(r[k]);\n            }\n            selTiles.push(r[k]);\n          }\n        }\n        tiles = selTiles;\n      }\n    }\n  }\n\n  /*\n  console.log({\n    level: this.level,\n    totalObjs: this.children.length,\n    tilesFound: tiles.length,\n    tilesInView: tiles.filter(this.#isInView || (() => true)).length,\n    levelTiles: this.#tilesMeta[this.level].length,\n    fetched: this.#tilesMeta[this.level].filter(d => d.obj).length,\n    loading: this.#tilesMeta[this.level].filter(d => d.loading).length,\n  });\n  */\n\n  tiles.filter(function (d) {\n    return !d.obj;\n  }).filter(_classPrivateFieldGet2(_isInView, this) || function () {\n    return true;\n  }).forEach(function (d) {\n    var x = d.x,\n      y = d.y,\n      lng = d.lng,\n      lat = d.lat,\n      latLen = d.latLen;\n    var lngLen = 360 / Math.pow(2, _this5.level);\n    if (!d.obj) {\n      var width = lngLen * (1 - _this5.tileMargin);\n      var height = latLen * (1 - _this5.tileMargin);\n      var rotLng = deg2Rad(lng);\n      var rotLat = deg2Rad(-lat);\n      var tile = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(_classPrivateFieldGet2(_radius, _this5), Math.ceil(width / _this5.curvatureResolution), Math.ceil(height / _this5.curvatureResolution), deg2Rad(90 - width / 2) + rotLng, deg2Rad(width), deg2Rad(90 - height / 2) + rotLat, deg2Rad(height)), new three__WEBPACK_IMPORTED_MODULE_2__.MeshLambertMaterial());\n      if (_classPrivateFieldGet2(_isMercator, _this5)) {\n        var _map = [lat + latLen / 2, lat - latLen / 2].map(function (lat) {\n            return 0.5 - lat / 180;\n          }),\n          _map2 = _slicedToArray(_map, 2),\n          _y = _map2[0],\n          _y2 = _map2[1];\n        convertMercatorUV(tile.geometry.attributes.uv, _y, _y2);\n      }\n      d.obj = tile;\n    }\n    if (!d.loading) {\n      d.loading = true;\n\n      // Fetch tile image\n      new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load(_this5.tileUrl(x, y, _this5.level), function (texture) {\n        var tile = d.obj;\n        if (tile) {\n          texture.colorSpace = three__WEBPACK_IMPORTED_MODULE_2__.SRGBColorSpace;\n          tile.material.map = texture;\n          tile.material.color = null;\n          tile.material.needsUpdate = true;\n          _this5.add(tile);\n        }\n        d.loading = false;\n      });\n    }\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-slippy-map-globe/dist/three-slippy-map-globe.mjs\n");

/***/ })

};
;