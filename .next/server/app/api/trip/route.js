(()=>{var e={};e.id=15,e.ids=[15],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},5511:e=>{"use strict";e.exports=require("crypto")},9021:e=>{"use strict";e.exports=require("fs")},1820:e=>{"use strict";e.exports=require("os")},3873:e=>{"use strict";e.exports=require("path")},6959:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>w,routeModule:()=>m,serverHooks:()=>b,workAsyncStorage:()=>h,workUnitAsyncStorage:()=>y});var n={};r.r(n),r.d(n,{POST:()=>f});var o=r(2706),a=r(8203),i=r(5994),s=r(9187),u=r(970),l=r(6529);function d(e){return({january:0,jan:0,february:1,feb:1,march:2,mar:2,april:3,apr:3,may:4,june:5,jun:5,july:6,jul:6,august:7,aug:7,september:8,sep:8,sept:8,october:9,oct:9,november:10,nov:10,december:11,dec:11})[e.toLowerCase()]??-1}function p(e){return e.toISOString().split("T")[0]}let g={from:"Where are you departing from? (Departure city)",to:"Where do you want to go? (Destination city)",date:"What is your travel date? (e.g. 18 August 2025 or Tomorrow)",budget:"What is your budget preference? Luxury, Medium, or Budget-friendly?",groupSize:"Are you traveling solo or in a group? (e.g., Solo, 2 people, Group of 5)",mode:"What transport mode do you prefer? Train, Bus, or Flight?",returnTrip:"Would you like to book a return trip? (Yes or No)",returnDate:"What date would you like to return? (e.g. 25 August 2025 or Next week)"};function c(e,t){return Math.floor(Math.random()*(t-e+1))+e}async function f(e){try{let{message:t,context:n={}}=await e.json(),o={...n};if(!t?.trim())return s.NextResponse.json({error:"Invalid message."},{status:400});let a=await (0,u.N)(t);console.log("Parsed NLP details:",a),a.from&&(o.from=a.from),a.to&&(o.to=a.to),a.date&&(o.date=a.date),a.budget&&(o.budget=a.budget),null!=a.groupSize&&(o.groupSize=a.groupSize),a.mode&&(o.mode=a.mode),null!=a.returnTrip&&(o.returnTrip=a.returnTrip),a.returnDate&&(o.returnDate=a.returnDate);let i=["from","to","date","mode","budget","groupSize"].find(e=>null==o[e]);if(!i&&o.returnTrip&&!o.returnDate)return s.NextResponse.json({assistantFollowUp:!0,ask:"returnDate",context:{...o,ask:"returnDate"},message:g.returnDate});if(i)return s.NextResponse.json({assistantFollowUp:!0,ask:i,context:{...o,ask:i},message:g[i]});if(o.flight&&o.budget&&!o.hotel)try{let e;let{searchHotels:t}=await r.e(909).then(r.bind(r,9909));e=o.date&&function(e){if(!e)return null;let t=e.trim().toLowerCase();if("today"===t)return new Date;if("tomorrow"===t){let e=new Date;return e.setDate(e.getDate()+1),e}if("day after tomorrow"===t||"day after"===t){let e=new Date;return e.setDate(e.getDate()+2),e}if(t.includes("next week")){let e=new Date;return e.setDate(e.getDate()+7),e}if(t.includes("next month")){let e=new Date;return e.setMonth(e.getMonth()+1),e}let r=t.match(/(\d+)(?:st|nd|rd|th)?\s+(?:of\s+)?([a-z]+)(?:\s+(\d{4}))?/i);if(r){let e=parseInt(r[1]),t=r[2],n=r[3]?parseInt(r[3]):new Date().getFullYear(),o=d(t);if(-1!==o){let t=new Date(n,o,e);if(t.getDate()===e&&t.getMonth()===o&&t.getFullYear()===n)return t}}let n=t.match(/([a-z]+)\s+(\d+)(?:\s+(\d{4}))?/i);if(n){let e=n[1],t=parseInt(n[2]),r=n[3]?parseInt(n[3]):new Date().getFullYear(),o=d(e);if(-1!==o){let e=new Date(r,o,t);if(e.getDate()===t&&e.getMonth()===o&&e.getFullYear()===r)return e}}if(/^\d{4}-\d{2}-\d{2}$/.test(t)){let e=new Date(t);if(!isNaN(e.getTime()))return e}let o=t.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);if(o){let e=parseInt(o[1]),t=parseInt(o[2])-1,r=parseInt(o[3]),n=new Date(r,t,e);if(n.getDate()===e&&n.getMonth()===t&&n.getFullYear()===r)return n}let a=new Date(t);return isNaN(a.getTime())?null:a}(o.date)||new Date;let n=p(e),a=p(new Date(e.getTime()+864e5)),i=await t({destination:o.to||"",checkInDate:n,checkOutDate:a,adults:o.groupSize||1,budget:o.budget});if(i.length>0)return s.NextResponse.json({assistantFollowUp:!0,ask:"groupSize",message:"Perfect! I've found several hotel options based on your budget. Please select one. Now, just to confirm, how many people are traveling?",context:o,data:{availableHotels:i,transport:o.flight}});return s.NextResponse.json({success:!1,message:`I couldn't find any hotels in ${o.to} matching your ${o.budget} budget. Would you like to try a different budget range?`,context:{...o,budget:void 0}})}catch(e){return console.error("Hotel search error:",e),s.NextResponse.json({success:!1,message:`Hotel search failed: ${e.message}. Please try again.`,context:o})}if(o.from&&o.to&&o.date&&o.mode&&!o.flight&&!o.train&&!o.bus)try{if("Flight"===o.mode){let e=await (0,l.o)({origin:o.from,destination:o.to,departureDate:o.date,adults:o.groupSize||1});if(!(e.length>0))return s.NextResponse.json({success:!1,message:`I'm sorry, I couldn't find any flights from ${o.from} to ${o.to} for that date. Would you like to try a different date?`,context:{...o,date:void 0}});if(o.returnTrip&&!o.returnDate)return s.NextResponse.json({assistantFollowUp:!0,ask:"returnDate",message:"Great! I've found several flights for your outbound journey. When would you like to return?",context:o,data:{availableFlights:e}});return s.NextResponse.json({assistantFollowUp:!0,ask:"budget",message:"Great! I've found several flights for you. Please select one. In the meantime, what's your budget for the trip?",context:o,data:{availableFlights:e}})}if("Train"===o.mode){let{searchTrains:e}=await r.e(841).then(r.bind(r,9841)),t=await e({origin:o.from,destination:o.to,departureDate:o.date,passengers:o.groupSize||1});if(!(t.length>0))return s.NextResponse.json({success:!1,message:`I'm sorry, I couldn't find any trains from ${o.from} to ${o.to} for that date. Would you like to try a different date?`,context:{...o,date:void 0}});if(o.returnTrip&&!o.returnDate)return s.NextResponse.json({assistantFollowUp:!0,ask:"returnDate",message:"Great! I've found several trains for your outbound journey. When would you like to return?",context:o,data:{availableTrains:t}});return s.NextResponse.json({assistantFollowUp:!0,ask:"budget",message:"Great! I've found several trains for you. Please select one. In the meantime, what's your budget for the trip?",context:o,data:{availableTrains:t}})}if("Bus"===o.mode){let{searchBuses:e}=await r.e(173).then(r.bind(r,5173)),t=await e({origin:o.from,destination:o.to,departureDate:o.date,passengers:o.groupSize||1});if(!(t.length>0))return s.NextResponse.json({success:!1,message:`I'm sorry, I couldn't find any buses from ${o.from} to ${o.to} for that date. Would you like to try a different date?`,context:{...o,date:void 0}});if(o.returnTrip&&!o.returnDate)return s.NextResponse.json({assistantFollowUp:!0,ask:"returnDate",message:"Great! I've found several buses for your outbound journey. When would you like to return?",context:o,data:{availableBuses:t}});return s.NextResponse.json({assistantFollowUp:!0,ask:"budget",message:"Great! I've found several buses for you. Please select one. In the meantime, what's your budget for the trip?",context:o,data:{availableBuses:t}})}}catch(e){return console.error(`${o.mode} search error:`,e),s.NextResponse.json({success:!1,message:`${o.mode} search failed: ${e.message}`})}if(o.returnTrip&&o.returnDate&&(o.flight&&!o.returnFlight||o.train&&!o.returnTrain||o.bus&&!o.returnBus))try{if("Flight"===o.mode&&o.flight){let e=await (0,l.o)({origin:o.to||"",destination:o.from||"",departureDate:o.returnDate||"",adults:o.groupSize||1});if(e.length>0)return s.NextResponse.json({assistantFollowUp:!0,message:"Great! I've found several return flights for you. Please select one for your return journey.",context:o,data:{availableFlights:e}});return s.NextResponse.json({success:!1,message:`I'm sorry, I couldn't find any return flights from ${o.to} to ${o.from} for ${o.returnDate}. Would you like to try a different return date?`,context:{...o,returnDate:void 0}})}if("Train"===o.mode&&o.train){let{searchTrains:e}=await r.e(841).then(r.bind(r,9841)),t=await e({origin:o.to||"",destination:o.from||"",departureDate:o.returnDate||"",passengers:o.groupSize||1});if(t.length>0)return s.NextResponse.json({assistantFollowUp:!0,message:"Great! I've found several return trains for you. Please select one for your return journey.",context:o,data:{availableTrains:t}});return s.NextResponse.json({success:!1,message:`I'm sorry, I couldn't find any return trains from ${o.to} to ${o.from} for ${o.returnDate}. Would you like to try a different return date?`,context:{...o,returnDate:void 0}})}if("Bus"===o.mode&&o.bus){let{searchBuses:e}=await r.e(173).then(r.bind(r,5173)),t=await e({origin:o.to||"",destination:o.from||"",departureDate:o.returnDate||"",passengers:o.groupSize||1});if(t.length>0)return s.NextResponse.json({assistantFollowUp:!0,message:"Great! I've found several return buses for you. Please select one for your return journey.",context:o,data:{availableBuses:t}});return s.NextResponse.json({success:!1,message:`I'm sorry, I couldn't find any return buses from ${o.to} to ${o.from} for ${o.returnDate}. Would you like to try a different return date?`,context:{...o,returnDate:void 0}})}}catch(e){return console.error(`Return ${o.mode} search error:`,e),s.NextResponse.json({success:!1,message:`Return ${o.mode} search failed: ${e.message}`})}if((o.flight||o.train||o.bus)&&o.hotel&&o.groupSize)try{let e;let t=c(400,700),r=c(500,800),n=0,a=0,i=null,u="flight",l="Airport";if(o.flight)u="flight",i=o.flight,n=o.flight.price*o.groupSize,l="Airport",o.returnTrip&&o.returnFlight&&(e=o.returnFlight,a=o.returnFlight.price*o.groupSize);else if(o.train)u="train",i=o.train,n=o.train.price*o.groupSize,l="Train Station",o.returnTrip&&o.returnTrain&&(e=o.returnTrain,a=o.returnTrain.price*o.groupSize);else if(o.bus)u="bus",i=o.bus,n=o.bus.price*o.groupSize,l="Bus Station",o.returnTrip&&o.returnBus&&(e=o.returnBus,a=o.returnBus.price*o.groupSize);else throw Error("No transport selected");let d=o.hotel.price*o.groupSize,p=t+r,g=n+a+d+p,f={transport:i,transportType:u,hotel:o.hotel,cabToStation:{name:`Uber to ${l} in ${o.from}`,price:t,details:"Standard Ride (UberX)"},cabToHotel:{name:`Uber from ${l} in ${o.to}`,price:r,details:"Standard Ride (UberX)"},groupSize:o.groupSize,total:g,returnTrip:o.returnTrip,returnDate:o.returnDate,returnTransport:e};return s.NextResponse.json({success:!0,message:"Excellent! Your personalized trip is all planned out with real prices. Here is the final summary with all costs included.",data:f,context:{lastPlannedTrip:f}})}catch(e){return console.error("Error finalizing trip plan:",e),s.NextResponse.json({success:!1,message:`Error calculating final trip costs: ${e.message}. Please try again.`,context:o})}if("book_trip"===a.intent&&(o.flight||o.train||o.bus)&&o.hotel)try{let t,r=null,n="flight",a="Airport",i=0,u=0;if(o.flight)r=o.flight,n="flight",i=o.flight.price,a="Airport",o.returnTrip&&o.returnFlight&&(t=o.returnFlight,u=o.returnFlight.price);else if(o.train)r=o.train,n="train",i=o.train.price,a="Train Station",o.returnTrip&&o.returnTrain&&(t=o.returnTrain,u=o.returnTrain.price);else if(o.bus)r=o.bus,n="bus",i=o.bus.price,a="Bus Station",o.returnTrip&&o.returnBus&&(t=o.returnBus,u=o.returnBus.price);else throw Error("No transport selected");let l=o.groupSize||1,d=c(400,700),p=c(500,800),g=o.hotel.price,f={transport:r,transportType:n,hotel:o.hotel,cabToStation:{name:`Uber to ${a} in ${o.from||""}`,price:d,details:"Standard Ride (UberX)"},cabToHotel:{name:`Uber from ${a} in ${o.to||""}`,price:p,details:"Standard Ride (UberX)"},groupSize:l,total:(i+u+g)*l+d+p,returnTrip:o.returnTrip,returnDate:o.returnDate,returnTransport:t},m=await fetch(new URL("/api/book-trip",e.url).toString(),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({tripPlan:f,context:o})}),h=await m.json();if(h.success)return s.NextResponse.json({success:!0,message:`Great news! Your trip from ${o.from||""} to ${o.to||""} on ${o.date||""} has been booked successfully! Your booking reference is ${h.bookingId}. You'll receive a confirmation email shortly.`,context:{...o,lastPlannedTrip:f,bookingReference:h.bookingId},data:f});return s.NextResponse.json({success:!1,message:`I'm sorry, there was an issue with your booking: ${h.message}. Would you like to try again?`,context:o})}catch(e){return console.error("Booking error:",e),s.NextResponse.json({success:!1,message:`I encountered an error while processing your booking: ${e.message}. Please try again.`,context:o})}return s.NextResponse.json({success:!1,message:"I'm not sure what to do next. Could you please clarify?",context:o})}catch(e){return console.error("API Route Error:",e),s.NextResponse.json({error:e.message||"An unexpected error occurred."},{status:500})}}let m=new o.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/trip/route",pathname:"/api/trip",filename:"route",bundlePath:"app/api/trip/route"},resolvedPagePath:"/Users/surajrawat/Downloads/Tripy/app/api/trip/route.ts",nextConfigOutput:"",userland:n}),{workAsyncStorage:h,workUnitAsyncStorage:y,serverHooks:b}=m;function w(){return(0,i.patchFetch)({workAsyncStorage:h,workUnitAsyncStorage:y})}},6487:()=>{},8335:()=>{},6529:(e,t,r)=>{"use strict";async function n(e){let t=process.env.AVIATIONSTACK_API_KEY;if(!t)throw Error("Flight API credentials are not configured.");try{let r=o(e.origin),n=o(e.destination);if(!r||!n)throw Error("Could not find airport code for the specified city.");let a=`https://api.aviationstack.com/v1/flights?access_key=${t}&dep_iata=${r}&arr_iata=${n}`,i=await fetch(a),s=await i.json();if(!i.ok||!s.data)throw console.error("AviationStack API Error:",s.error?.info),Error(s.error?.info||"Failed to fetch flight data.");return s.data.slice(0,5).map((e,t)=>{let o="3h 15m";if(e.departure?.scheduled&&e.arrival?.scheduled){let t=new Date(e.departure.scheduled),r=new Date(e.arrival.scheduled).getTime()-t.getTime(),n=Math.floor(r/36e5),a=Math.floor(r%36e5/6e4);o=`${n}h ${a}m`}let a={"DEL-BOM":1.2,"DEL-BLR":1.4,"DEL-MAA":1.6,"DEL-CCU":1.1,"BOM-DEL":1.2,"BOM-BLR":1.1,"BOM-MAA":1.3,"BOM-CCU":1.5,"BLR-DEL":1.4,"BLR-BOM":1.1,"BLR-MAA":1,"BLR-CCU":1.4,"MAA-DEL":1.6,"MAA-BOM":1.3,"MAA-BLR":1,"MAA-CCU":1.5,"CCU-DEL":1.1,"CCU-BOM":1.5,"CCU-BLR":1.4,"CCU-MAA":1.5}[`${r}-${n}`]||1.2,i={"Air India":1.1,IndiGo:.9,SpiceJet:.85,Vistara:1,"AirAsia India":.8,GoAir:.9,"Jet Airways":1.2,"Kingfisher Airlines":1.1}[e.airline?.name]||1,s=Math.floor(4500*a*i*(.8+.4*Math.random()));return{id:e.flight?.iata||`flight_${t}`,airline:e.airline?.name||"Unknown Airline",flightNumber:e.flight?.number||"N/A",departureAirportIata:e.departure?.iata,arrivalAirportIata:e.arrival?.iata,departureTime:e.departure?.scheduled?new Date(e.departure.scheduled).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"}):"N/A",arrivalTime:e.arrival?.scheduled?new Date(e.arrival.scheduled).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"}):"N/A",duration:o,price:s,currency:"INR",deeplink:`https://www.google.com/flights?q=flights+from+${r}+to+${n}`,stops:e.departure?.delay!=null?1:0}})}catch(e){throw console.error("Error in searchFlights:",e),e}}function o(e){return({delhi:"DEL",mumbai:"BOM",bengaluru:"BLR",chennai:"MAA",kolkata:"CCU",hyderabad:"HYD",pune:"PNQ",ahmedabad:"AMD",jaipur:"JAI",lucknow:"LKO"})[e.toLowerCase()]||null}r.d(t,{o:()=>n})},970:(e,t,r)=>{"use strict";async function n(e){let t=process.env.GEMINI_API_KEY;if(!t)return console.error("GEMINI_API_KEY is not set in your environment variables (.env.local)."),{intent:"error",message:"API key for NLP is missing. Please configure it.",from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null};let r=`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${t}`,n=`You are a precise travel information extraction API. Extract the following from user's message:
- from: Origin city (e.g., "New Delhi")
- to: Destination city (e.g., "Mumbai")
- date: Date of travel (e.g., "25th December", "tomorrow", "August 18 2025")
- budget: One of Luxury, Medium, Budget-friendly
- mode: One of Train, Bus, Flight
- groupSize: Number of people (e.g., 1, 2, 5)
- returnTrip: Boolean (true if the user wants a round trip or return journey, false or null if one-way)
- returnDate: Date of return travel (e.g., "30th December", "next week", "August 25 2025")
- intent: 'book_trip' if the user wants to plan or book a trip (including phrases like "book my ticket", "book it", "confirm booking", "book now", "make a booking", "reserve", "purchase ticket", "buy ticket", "proceed with booking", "complete booking", "finalize booking", "book this trip", "book the flight", "book the hotel"), 'display_trip' if they want to see a previous trip, 'cancel_trip' if they want to clear the current plan, 'greet' for greetings (e.g., "hi", "hello").
- message: An optional, brief confirmation or error message (e.g., "Understood!", "Please clarify the date.").

Return only JSON as per this schema with no markdown or extra text. If a field is not found, set its value to null.`,o={contents:[{role:"user",parts:[{text:`${n}

User message: "${e}"`}]}],generationConfig:{responseMimeType:"application/json",responseSchema:{type:"OBJECT",properties:{from:{type:"STRING",nullable:!0},to:{type:"STRING",nullable:!0},date:{type:"STRING",nullable:!0},budget:{type:"STRING",enum:["Luxury","Medium","Budget-friendly"],nullable:!0},mode:{type:"STRING",enum:["Train","Bus","Flight"],nullable:!0},groupSize:{type:"NUMBER",nullable:!0},returnTrip:{type:"BOOLEAN",nullable:!0},returnDate:{type:"STRING",nullable:!0},intent:{type:"STRING",enum:["book_trip","display_trip","cancel_trip","greet","error","unknown"]},message:{type:"STRING",nullable:!0}},required:["intent"]}}};try{let e;let t=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!t.ok){let e=await t.text();return console.error("Gemini API failed:",t.status,e),{intent:"error",message:`NLP service error: ${t.statusText}. Details: ${e.substring(0,150)}`,from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null}}let n=t.headers.get("content-type");if(!n||!n.includes("application/json")){let e=await t.text();return console.error("Gemini API did not return JSON. Content-Type:",n,"Raw body:",e),{intent:"error",message:"NLP service returned an invalid response format.",from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null}}let a=await t.json(),i=a.candidates?.[0]?.content?.parts?.[0]?.text;if(!i)return console.warn("Gemini API returned no text content or candidates."),{intent:"unknown",message:"I could not extract specific information from your message. Can you please rephrase?",from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null};let s=i.trim();s.startsWith("```json")?s=s.slice(7,-3).trim():s.startsWith("```")&&(s=s.slice(3,-3).trim());let u=s.replace(/: "null"/g,": null");try{e=JSON.parse(u)}catch(e){return console.error("Failed to parse Gemini's JSON response:",e,"Raw:",u),{intent:"error",message:"NLP service returned malformed JSON. Please try again.",from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null}}return"string"==typeof e.groupSize&&(e.groupSize=parseInt(e.groupSize,10),isNaN(e.groupSize)&&(e.groupSize=null)),e.from=void 0===e.from?null:e.from,e.to=void 0===e.to?null:e.to,e.date=void 0===e.date?null:e.date,e.budget=void 0===e.budget?null:e.budget,e.mode=void 0===e.mode?null:e.mode,e.groupSize=void 0===e.groupSize?null:e.groupSize,e.message=void 0===e.message?void 0:e.message,e.intent&&["book_trip","display_trip","cancel_trip","greet","error","unknown"].includes(e.intent)||(console.warn(`NLP returned an invalid or missing intent: "${e.intent}". Defaulting to 'unknown'.`),e.intent="unknown",e.message=e.message||"I could not determine your intent. Can you please rephrase?"),e.returnTrip=void 0===e.returnTrip?null:e.returnTrip,e.returnDate=void 0===e.returnDate?null:e.returnDate,console.log("✅ NLP parse successful:",e),e}catch(e){return console.error("❌ NLP parse failed:",e),{intent:"error",message:e.message||"An unexpected error occurred during NLP parsing.",from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null}}}r.d(t,{N:()=>n})}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),n=t.X(0,[994,452],()=>r(6959));module.exports=n})();