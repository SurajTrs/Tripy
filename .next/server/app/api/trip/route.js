/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/trip/route";
exports.ids = ["app/api/trip/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrip%2Froute&page=%2Fapi%2Ftrip%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrip%2Froute.ts&appDir=%2FUsers%2Fsurajrawat%2FDownloads%2FTripy%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsurajrawat%2FDownloads%2FTripy&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=export&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrip%2Froute&page=%2Fapi%2Ftrip%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrip%2Froute.ts&appDir=%2FUsers%2Fsurajrawat%2FDownloads%2FTripy%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsurajrawat%2FDownloads%2FTripy&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=export&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_surajrawat_Downloads_Tripy_app_api_trip_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/trip/route.ts */ \"(rsc)/./app/api/trip/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"export\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/trip/route\",\n        pathname: \"/api/trip\",\n        filename: \"route\",\n        bundlePath: \"app/api/trip/route\"\n    },\n    resolvedPagePath: \"/Users/surajrawat/Downloads/Tripy/app/api/trip/route.ts\",\n    nextConfigOutput,\n    userland: _Users_surajrawat_Downloads_Tripy_app_api_trip_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZ0cmlwJTJGcm91dGUmcGFnZT0lMkZhcGklMkZ0cmlwJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGdHJpcCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnN1cmFqcmF3YXQlMkZEb3dubG9hZHMlMkZUcmlweSUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZzdXJhanJhd2F0JTJGRG93bmxvYWRzJTJGVHJpcHkmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9ZXhwb3J0JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ087QUFDcEY7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlHQUFtQjtBQUMzQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7O0FBRTFGIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9zdXJhanJhd2F0L0Rvd25sb2Fkcy9UcmlweS9hcHAvYXBpL3RyaXAvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiZXhwb3J0XCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3RyaXAvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS90cmlwXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS90cmlwL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL3N1cmFqcmF3YXQvRG93bmxvYWRzL1RyaXB5L2FwcC9hcGkvdHJpcC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrip%2Froute&page=%2Fapi%2Ftrip%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrip%2Froute.ts&appDir=%2FUsers%2Fsurajrawat%2FDownloads%2FTripy%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsurajrawat%2FDownloads%2FTripy&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=export&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./app/api/trip/route.ts":
/*!*******************************!*\
  !*** ./app/api/trip/route.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_nlpParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/nlpParser */ \"(rsc)/./lib/nlpParser.ts\");\n/* harmony import */ var _lib_flightApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/flightApi */ \"(rsc)/./lib/flightApi.ts\");\n// app/api/trip/route.ts\n\n\n\nconst QUESTIONS = {\n    from: 'Where are you departing from? (Departure city)',\n    to: 'Where do you want to go? (Destination city)',\n    date: 'What is your travel date? (e.g. 18 August 2025 or Tomorrow)',\n    budget: 'What is your budget preference? Luxury, Medium, or Budget-friendly?',\n    groupSize: 'Are you traveling solo or in a group? (e.g., Solo, 2 people, Group of 5)',\n    mode: 'What transport mode do you prefer? Train, Bus, or Flight?'\n};\nfunction getRandomPrice(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nasync function POST(req) {\n    try {\n        const { message, context: ctxIn = {} } = await req.json();\n        const context = {\n            ...ctxIn\n        };\n        if (!message?.trim()) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid message.'\n            }, {\n                status: 400\n            });\n        }\n        const parsed = await (0,_lib_nlpParser__WEBPACK_IMPORTED_MODULE_1__.parseTripDetails)(message);\n        console.log(\"Parsed NLP details:\", parsed);\n        // --- Intent Handling can remain here ---\n        // ...\n        // Update context with the latest information from the user's message\n        if (parsed.from) context.from = parsed.from;\n        if (parsed.to) context.to = parsed.to;\n        if (parsed.date) context.date = parsed.date;\n        if (parsed.budget) context.budget = parsed.budget;\n        if (parsed.groupSize != null) context.groupSize = parsed.groupSize;\n        if (parsed.mode) context.mode = parsed.mode;\n        // --- REVISED INTERACTIVE PLANNING LOGIC ---\n        // --- FIX: The logic is now combined. If a flight is selected AND a budget is now available\n        // (either from a previous turn or the current one), we proceed directly to hotels.\n        // STEP 2: SEARCH FOR HOTELS (This check now comes before the flight search)\n        // Condition: A flight is selected, and a budget is set, but no hotel has been selected yet.\n        if (context.flight && context.budget && !context.hotel) {\n            // MOCK HOTEL SEARCH\n            const hotels = Array.from({\n                length: 3\n            }).map((_, i)=>{\n                const base = context.budget === 'Luxury' ? 4000 : context.budget === 'Medium' ? 2000 : 800;\n                const price = getRandomPrice(base, base + 1500);\n                return {\n                    id: `hotel_${i}`,\n                    name: `${context.budget} Hotel Option ${i + 1}`,\n                    price,\n                    currency: 'INR',\n                    category: context.budget,\n                    rating: 3.5 + i * 0.5,\n                    address: `123 Main St, ${context.to || ''}`,\n                    deeplink: `https://mock.hotels/book?d=${context.to}&p=${price}`,\n                    imageUrl: `https://placehold.co/400x200/7c3aed/ffffff?text=Hotel+${i + 1}`\n                };\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                assistantFollowUp: true,\n                ask: 'groupSize',\n                message: \"Perfect. Based on your budget, here are some hotel options. Please select one. Now, just to confirm, how many people are traveling?\",\n                context: context,\n                data: {\n                    availableHotels: hotels,\n                    transport: context.flight\n                }\n            });\n        }\n        // STEP 1: SEARCH FOR FLIGHTS\n        // Condition: We have enough info for a flight search, but no flight has been selected yet.\n        if (context.from && context.to && context.date && context.mode === 'Flight' && !context.flight) {\n            try {\n                const flights = await (0,_lib_flightApi__WEBPACK_IMPORTED_MODULE_2__.searchFlights)({\n                    origin: context.from,\n                    destination: context.to,\n                    departureDate: context.date,\n                    adults: context.groupSize || 1\n                });\n                if (flights.length > 0) {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        assistantFollowUp: true,\n                        ask: 'budget',\n                        message: \"Great! I've found several flights for you. Please select one. In the meantime, what's your budget for the trip?\",\n                        context: context,\n                        data: {\n                            availableFlights: flights\n                        }\n                    });\n                } else {\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: false,\n                        message: `I'm sorry, I couldn't find any flights from ${context.from} to ${context.to} for that date. Would you like to try a different date?`,\n                        context: {\n                            ...context,\n                            date: undefined\n                        }\n                    });\n                }\n            } catch (e) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    message: `Flight search failed: ${e.message}`\n                });\n            }\n        }\n        // STEP 3: FINALIZE THE PLAN\n        if (context.flight && context.hotel && context.groupSize) {\n            const cabToStationPrice = getRandomPrice(400, 700);\n            const cabToHotelPrice = getRandomPrice(500, 800);\n            const totalCost = context.flight.price * context.groupSize + context.hotel.price * context.groupSize + cabToStationPrice + cabToHotelPrice;\n            const finalPlan = {\n                transport: context.flight,\n                hotel: context.hotel,\n                cabToStation: {\n                    name: `Cab to Airport in ${context.from}`,\n                    price: cabToStationPrice,\n                    details: 'Standard Ride'\n                },\n                cabToHotel: {\n                    name: `Cab from Airport in ${context.to}`,\n                    price: cabToHotelPrice,\n                    details: 'Standard Ride'\n                },\n                groupSize: context.groupSize,\n                total: totalCost\n            };\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: \"Excellent! Your personalized trip is all planned out. Here is the final summary.\",\n                data: finalPlan,\n                context: {\n                    lastPlannedTrip: finalPlan\n                }\n            });\n        }\n        // --- FALLBACK: ASK THE NEXT QUESTION ---\n        const slots = [\n            'from',\n            'to',\n            'date',\n            'mode',\n            'budget',\n            'groupSize'\n        ];\n        const missing = slots.find((k)=>context[k] == null);\n        if (missing) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                assistantFollowUp: true,\n                ask: missing,\n                context: {\n                    ...context,\n                    ask: missing\n                },\n                message: QUESTIONS[missing]\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            message: \"I'm not sure what to do next. Could you please clarify?\",\n            context: context\n        });\n    } catch (err) {\n        console.error(\"API Route Error:\", err);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: err.message || 'An unexpected error occurred.'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/trip/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/flightApi.ts":
/*!**************************!*\
  !*** ./lib/flightApi.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   searchFlights: () => (/* binding */ searchFlights)\n/* harmony export */ });\n// src/lib/flightApi.ts\n// This is the main function that will be called from your API route\nasync function searchFlights(params) {\n    // 1. Check for the API Key from your .env.local file\n    const apiKey = process.env.AVIATIONSTACK_API_KEY;\n    if (!apiKey) {\n        // If the key is missing, throw an error to stop the process\n        throw new Error('Flight API credentials are not configured.');\n    }\n    try {\n        // 2. We need to convert city names (like \"delhi\") to IATA codes (like \"DEL\").\n        // For this example, we'll use a simple hardcoded mapping.\n        // In a real app, you might use another API for this conversion.\n        const originIata = getIataCode(params.origin);\n        const destinationIata = getIataCode(params.destination);\n        if (!originIata || !destinationIata) {\n            throw new Error('Could not find airport code for the specified city.');\n        }\n        // 3. Construct the API URL with the search parameters\n        const apiUrl = `https://api.aviationstack.com/v1/flights?access_key=${apiKey}&dep_iata=${originIata}&arr_iata=${destinationIata}`;\n        // 4. Make the actual API call\n        const response = await fetch(apiUrl);\n        const result = await response.json();\n        if (!response.ok || !result.data) {\n            console.error(\"AviationStack API Error:\", result.error?.info);\n            throw new Error(result.error?.info || 'Failed to fetch flight data.');\n        }\n        // 5. Format the API response to match your app's FlightData interface\n        // The free AviationStack plan often returns limited live data, so we map what we can\n        // and add some mock data for fields that might be missing.\n        const flights = result.data.slice(0, 5).map((flight, index)=>({\n                id: flight.flight.iata || `flight_${index}`,\n                airline: flight.airline.name || 'Unknown Airline',\n                flightNumber: flight.flight.number || 'N/A',\n                departureAirportIata: flight.departure.iata,\n                arrivalAirportIata: flight.arrival.iata,\n                departureTime: new Date(flight.departure.scheduled).toLocaleTimeString([], {\n                    hour: '2-digit',\n                    minute: '2-digit'\n                }),\n                arrivalTime: new Date(flight.arrival.scheduled).toLocaleTimeString([], {\n                    hour: '2-digit',\n                    minute: '2-digit'\n                }),\n                duration: '3h 15m',\n                price: Math.floor(Math.random() * (8000 - 4500 + 1)) + 4500,\n                currency: 'INR',\n                deeplink: `https://www.google.com/flights?q=flights+from+${originIata}+to+${destinationIata}`,\n                stops: flight.departure.delay != null ? 1 : 0\n            }));\n        return flights;\n    } catch (error) {\n        console.error('Error in searchFlights:', error);\n        // Re-throw the error so the API route can handle it\n        throw error;\n    }\n}\n// Helper function to get IATA codes.\nfunction getIataCode(city) {\n    const cityLower = city.toLowerCase();\n    const iataMap = {\n        'delhi': 'DEL',\n        'mumbai': 'BOM',\n        'bengaluru': 'BLR',\n        'chennai': 'MAA',\n        'kolkata': 'CCU'\n    };\n    return iataMap[cityLower] || null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aXB5L2xpYi9mbGlnaHRBcGkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2xpYi9mbGlnaHRBcGkudHNcbmltcG9ydCB7IEZsaWdodERhdGEgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8vIFRoaXMgaW50ZXJmYWNlIGRlZmluZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgc2VhcmNoIHBhcmFtZXRlcnNcbmludGVyZmFjZSBGbGlnaHRTZWFyY2hQYXJhbXMge1xuICBvcmlnaW46IHN0cmluZztcbiAgZGVzdGluYXRpb246IHN0cmluZztcbiAgZGVwYXJ0dXJlRGF0ZTogc3RyaW5nO1xuICBhZHVsdHM6IG51bWJlcjtcbn1cblxuLy8gVGhpcyBpcyB0aGUgbWFpbiBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGZyb20geW91ciBBUEkgcm91dGVcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZWFyY2hGbGlnaHRzKHBhcmFtczogRmxpZ2h0U2VhcmNoUGFyYW1zKTogUHJvbWlzZTxGbGlnaHREYXRhW10+IHtcbiAgLy8gMS4gQ2hlY2sgZm9yIHRoZSBBUEkgS2V5IGZyb20geW91ciAuZW52LmxvY2FsIGZpbGVcbiAgY29uc3QgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuQVZJQVRJT05TVEFDS19BUElfS0VZO1xuICBpZiAoIWFwaUtleSkge1xuICAgIC8vIElmIHRoZSBrZXkgaXMgbWlzc2luZywgdGhyb3cgYW4gZXJyb3IgdG8gc3RvcCB0aGUgcHJvY2Vzc1xuICAgIHRocm93IG5ldyBFcnJvcignRmxpZ2h0IEFQSSBjcmVkZW50aWFscyBhcmUgbm90IGNvbmZpZ3VyZWQuJyk7XG4gIH1cblxuICB0cnkge1xuICAgIC8vIDIuIFdlIG5lZWQgdG8gY29udmVydCBjaXR5IG5hbWVzIChsaWtlIFwiZGVsaGlcIikgdG8gSUFUQSBjb2RlcyAobGlrZSBcIkRFTFwiKS5cbiAgICAvLyBGb3IgdGhpcyBleGFtcGxlLCB3ZSdsbCB1c2UgYSBzaW1wbGUgaGFyZGNvZGVkIG1hcHBpbmcuXG4gICAgLy8gSW4gYSByZWFsIGFwcCwgeW91IG1pZ2h0IHVzZSBhbm90aGVyIEFQSSBmb3IgdGhpcyBjb252ZXJzaW9uLlxuICAgIGNvbnN0IG9yaWdpbklhdGEgPSBnZXRJYXRhQ29kZShwYXJhbXMub3JpZ2luKTtcbiAgICBjb25zdCBkZXN0aW5hdGlvbklhdGEgPSBnZXRJYXRhQ29kZShwYXJhbXMuZGVzdGluYXRpb24pO1xuXG4gICAgaWYgKCFvcmlnaW5JYXRhIHx8ICFkZXN0aW5hdGlvbklhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgYWlycG9ydCBjb2RlIGZvciB0aGUgc3BlY2lmaWVkIGNpdHkuJyk7XG4gICAgfVxuXG4gICAgLy8gMy4gQ29uc3RydWN0IHRoZSBBUEkgVVJMIHdpdGggdGhlIHNlYXJjaCBwYXJhbWV0ZXJzXG4gICAgY29uc3QgYXBpVXJsID0gYGh0dHBzOi8vYXBpLmF2aWF0aW9uc3RhY2suY29tL3YxL2ZsaWdodHM/YWNjZXNzX2tleT0ke2FwaUtleX0mZGVwX2lhdGE9JHtvcmlnaW5JYXRhfSZhcnJfaWF0YT0ke2Rlc3RpbmF0aW9uSWF0YX1gO1xuXG4gICAgLy8gNC4gTWFrZSB0aGUgYWN0dWFsIEFQSSBjYWxsXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgIGlmICghcmVzcG9uc2Uub2sgfHwgIXJlc3VsdC5kYXRhKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiQXZpYXRpb25TdGFjayBBUEkgRXJyb3I6XCIsIHJlc3VsdC5lcnJvcj8uaW5mbyk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LmVycm9yPy5pbmZvIHx8ICdGYWlsZWQgdG8gZmV0Y2ggZmxpZ2h0IGRhdGEuJyk7XG4gICAgfVxuXG4gICAgLy8gNS4gRm9ybWF0IHRoZSBBUEkgcmVzcG9uc2UgdG8gbWF0Y2ggeW91ciBhcHAncyBGbGlnaHREYXRhIGludGVyZmFjZVxuICAgIC8vIFRoZSBmcmVlIEF2aWF0aW9uU3RhY2sgcGxhbiBvZnRlbiByZXR1cm5zIGxpbWl0ZWQgbGl2ZSBkYXRhLCBzbyB3ZSBtYXAgd2hhdCB3ZSBjYW5cbiAgICAvLyBhbmQgYWRkIHNvbWUgbW9jayBkYXRhIGZvciBmaWVsZHMgdGhhdCBtaWdodCBiZSBtaXNzaW5nLlxuICAgIGNvbnN0IGZsaWdodHM6IEZsaWdodERhdGFbXSA9IHJlc3VsdC5kYXRhLnNsaWNlKDAsIDUpLm1hcCgoZmxpZ2h0OiBhbnksIGluZGV4OiBudW1iZXIpID0+ICh7XG4gICAgICBpZDogZmxpZ2h0LmZsaWdodC5pYXRhIHx8IGBmbGlnaHRfJHtpbmRleH1gLFxuICAgICAgYWlybGluZTogZmxpZ2h0LmFpcmxpbmUubmFtZSB8fCAnVW5rbm93biBBaXJsaW5lJyxcbiAgICAgIGZsaWdodE51bWJlcjogZmxpZ2h0LmZsaWdodC5udW1iZXIgfHwgJ04vQScsXG4gICAgICBkZXBhcnR1cmVBaXJwb3J0SWF0YTogZmxpZ2h0LmRlcGFydHVyZS5pYXRhLFxuICAgICAgYXJyaXZhbEFpcnBvcnRJYXRhOiBmbGlnaHQuYXJyaXZhbC5pYXRhLFxuICAgICAgZGVwYXJ0dXJlVGltZTogbmV3IERhdGUoZmxpZ2h0LmRlcGFydHVyZS5zY2hlZHVsZWQpLnRvTG9jYWxlVGltZVN0cmluZyhbXSwgeyBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnIH0pLFxuICAgICAgYXJyaXZhbFRpbWU6IG5ldyBEYXRlKGZsaWdodC5hcnJpdmFsLnNjaGVkdWxlZCkudG9Mb2NhbGVUaW1lU3RyaW5nKFtdLCB7IGhvdXI6ICcyLWRpZ2l0JywgbWludXRlOiAnMi1kaWdpdCcgfSksXG4gICAgICBkdXJhdGlvbjogJzNoIDE1bScsIC8vIE1vY2sgZGF0YVxuICAgICAgcHJpY2U6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICg4MDAwIC0gNDUwMCArIDEpKSArIDQ1MDAsIC8vIE1vY2sgcHJpY2VcbiAgICAgIGN1cnJlbmN5OiAnSU5SJyxcbiAgICAgIGRlZXBsaW5rOiBgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9mbGlnaHRzP3E9ZmxpZ2h0cytmcm9tKyR7b3JpZ2luSWF0YX0rdG8rJHtkZXN0aW5hdGlvbklhdGF9YCwgLy8gRXhhbXBsZSBkZWVwbGlua1xuICAgICAgc3RvcHM6IGZsaWdodC5kZXBhcnR1cmUuZGVsYXkgIT0gbnVsbCA/IDEgOiAwLCAvLyBFeGFtcGxlIGxvZ2ljIGZvciBzdG9wc1xuICAgIH0pKTtcblxuICAgIHJldHVybiBmbGlnaHRzO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gc2VhcmNoRmxpZ2h0czonLCBlcnJvcik7XG4gICAgLy8gUmUtdGhyb3cgdGhlIGVycm9yIHNvIHRoZSBBUEkgcm91dGUgY2FuIGhhbmRsZSBpdFxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgSUFUQSBjb2Rlcy5cbmZ1bmN0aW9uIGdldElhdGFDb2RlKGNpdHk6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIGNvbnN0IGNpdHlMb3dlciA9IGNpdHkudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBpYXRhTWFwOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgICAgICAnZGVsaGknOiAnREVMJyxcbiAgICAgICAgJ211bWJhaSc6ICdCT00nLFxuICAgICAgICAnYmVuZ2FsdXJ1JzogJ0JMUicsXG4gICAgICAgICdjaGVubmFpJzogJ01BQScsXG4gICAgICAgICdrb2xrYXRhJzogJ0NDVScsXG4gICAgICAgIC8vIEFkZCBtb3JlIGNpdGllcyBhcyBuZWVkZWRcbiAgICB9O1xuICAgIHJldHVybiBpYXRhTWFwW2NpdHlMb3dlcl0gfHwgbnVsbDtcbn1cbiJdLCJuYW1lcyI6WyJzZWFyY2hGbGlnaHRzIiwicGFyYW1zIiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIkFWSUFUSU9OU1RBQ0tfQVBJX0tFWSIsIkVycm9yIiwib3JpZ2luSWF0YSIsImdldElhdGFDb2RlIiwib3JpZ2luIiwiZGVzdGluYXRpb25JYXRhIiwiZGVzdGluYXRpb24iLCJhcGlVcmwiLCJyZXNwb25zZSIsImZldGNoIiwicmVzdWx0IiwianNvbiIsIm9rIiwiZGF0YSIsImNvbnNvbGUiLCJlcnJvciIsImluZm8iLCJmbGlnaHRzIiwic2xpY2UiLCJtYXAiLCJmbGlnaHQiLCJpbmRleCIsImlkIiwiaWF0YSIsImFpcmxpbmUiLCJuYW1lIiwiZmxpZ2h0TnVtYmVyIiwibnVtYmVyIiwiZGVwYXJ0dXJlQWlycG9ydElhdGEiLCJkZXBhcnR1cmUiLCJhcnJpdmFsQWlycG9ydElhdGEiLCJhcnJpdmFsIiwiZGVwYXJ0dXJlVGltZSIsIkRhdGUiLCJzY2hlZHVsZWQiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJob3VyIiwibWludXRlIiwiYXJyaXZhbFRpbWUiLCJkdXJhdGlvbiIsInByaWNlIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY3VycmVuY3kiLCJkZWVwbGluayIsInN0b3BzIiwiZGVsYXkiLCJjaXR5IiwiY2l0eUxvd2VyIiwidG9Mb3dlckNhc2UiLCJpYXRhTWFwIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/flightApi.ts\n");

/***/ }),

/***/ "(rsc)/./lib/nlpParser.ts":
/*!**************************!*\
  !*** ./lib/nlpParser.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseTripDetails: () => (/* binding */ parseTripDetails)\n/* harmony export */ });\n// src/lib/nlpParser.ts\n// This file integrates with the Gemini API for natural language processing.\n/**\n * Parses user messages using the Gemini API to extract trip details and intent.\n * @param message The user's input message.\n * @returns A promise that resolves to ParsedTripDetails.\n */ async function parseTripDetails(message) {\n    const apiKey = process.env.GEMINI_API_KEY; // Get API key from environment variables\n    if (!apiKey) {\n        console.error(\"GEMINI_API_KEY is not set in your environment variables (.env.local).\");\n        // Return a structured error response if API key is missing\n        return {\n            intent: 'error',\n            message: 'API key for NLP is missing. Please configure it.',\n            from: null,\n            to: null,\n            date: null,\n            budget: null,\n            mode: null,\n            groupSize: null\n        };\n    }\n    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\n    // IMPORTANT: The system prompt is crucial for Gemini's output format.\n    // Ensure it strongly enforces JSON output with 'null' for missing fields.\n    const systemPrompt = `You are a precise travel information extraction API. Extract the following from user's message:\n- from: Origin city (e.g., \"New Delhi\")\n- to: Destination city (e.g., \"Mumbai\")\n- date: Date of travel (e.g., \"25th December\", \"tomorrow\", \"August 18 2025\")\n- budget: One of Luxury, Medium, Budget-friendly\n- mode: One of Train, Bus, Flight\n- groupSize: Number of people (e.g., 1, 2, 5)\n- intent: 'book_trip' if the user wants to plan or book a trip, 'display_trip' if they want to see a previous trip, 'cancel_trip' if they want to clear the current plan, 'greet' for greetings (e.g., \"hi\", \"hello\").\n- message: An optional, brief confirmation or error message (e.g., \"Understood!\", \"Please clarify the date.\").\n\nReturn only JSON as per this schema with no markdown or extra text. If a field is not found, set its value to null.`;\n    const payload = {\n        contents: [\n            {\n                role: \"user\",\n                parts: [\n                    {\n                        text: `${systemPrompt}\\n\\nUser message: \"${message}\"`\n                    }\n                ]\n            }\n        ],\n        generationConfig: {\n            responseMimeType: \"application/json\",\n            responseSchema: {\n                type: \"OBJECT\",\n                properties: {\n                    from: {\n                        type: \"STRING\",\n                        nullable: true\n                    },\n                    to: {\n                        type: \"STRING\",\n                        nullable: true\n                    },\n                    date: {\n                        type: \"STRING\",\n                        nullable: true\n                    },\n                    budget: {\n                        type: \"STRING\",\n                        enum: [\n                            \"Luxury\",\n                            \"Medium\",\n                            \"Budget-friendly\"\n                        ],\n                        nullable: true\n                    },\n                    mode: {\n                        type: \"STRING\",\n                        enum: [\n                            \"Train\",\n                            \"Bus\",\n                            \"Flight\"\n                        ],\n                        nullable: true\n                    },\n                    groupSize: {\n                        type: \"NUMBER\",\n                        nullable: true\n                    },\n                    intent: {\n                        type: \"STRING\",\n                        enum: [\n                            \"book_trip\",\n                            \"display_trip\",\n                            \"cancel_trip\",\n                            \"greet\",\n                            \"error\",\n                            \"unknown\"\n                        ] // Ensure all intents are covered\n                    },\n                    message: {\n                        type: \"STRING\",\n                        nullable: true\n                    }\n                },\n                required: [\n                    \"intent\"\n                ]\n            }\n        }\n    };\n    try {\n        const res = await fetch(apiUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(payload)\n        });\n        if (!res.ok) {\n            const errText = await res.text();\n            console.error(\"Gemini API failed:\", res.status, errText);\n            // Return a structured error response if Gemini API fails\n            return {\n                intent: 'error',\n                message: `NLP service error: ${res.statusText}. Details: ${errText.substring(0, 150)}`,\n                from: null,\n                to: null,\n                date: null,\n                budget: null,\n                mode: null,\n                groupSize: null\n            };\n        }\n        const contentType = res.headers.get(\"content-type\");\n        if (!contentType || !contentType.includes(\"application/json\")) {\n            const rawText = await res.text();\n            console.error(\"Gemini API did not return JSON. Content-Type:\", contentType, \"Raw body:\", rawText);\n            // Fallback for non-JSON response from Gemini\n            return {\n                intent: 'error',\n                message: 'NLP service returned an invalid response format.',\n                from: null,\n                to: null,\n                date: null,\n                budget: null,\n                mode: null,\n                groupSize: null\n            };\n        }\n        const result = await res.json();\n        // Gemini 2.0 Flash with responseSchema directly returns the JSON object in 'text' part\n        const part = result.candidates?.[0]?.content?.parts?.[0]?.text;\n        if (!part) {\n            console.warn(\"Gemini API returned no text content or candidates.\");\n            // Return a default 'unknown' intent with a helpful message\n            return {\n                intent: 'unknown',\n                message: 'I could not extract specific information from your message. Can you please rephrase?',\n                from: null,\n                to: null,\n                date: null,\n                budget: null,\n                mode: null,\n                groupSize: null\n            };\n        }\n        let raw = part.trim();\n        // Clean up markdown code block if present (Gemini with responseSchema often omits this, but good to keep)\n        if (raw.startsWith('```json')) raw = raw.slice(7, -3).trim();\n        else if (raw.startsWith('```')) raw = raw.slice(3, -3).trim();\n        // Replace \"null\" strings with actual null values for JSON parsing, if Gemini outputs them as strings\n        const cleanJson = raw.replace(/: \"null\"/g, \": null\");\n        let parsedData;\n        try {\n            parsedData = JSON.parse(cleanJson);\n        } catch (parseError) {\n            console.error(\"Failed to parse Gemini's JSON response:\", parseError, \"Raw:\", cleanJson);\n            return {\n                intent: 'error',\n                message: 'NLP service returned malformed JSON. Please try again.',\n                from: null,\n                to: null,\n                date: null,\n                budget: null,\n                mode: null,\n                groupSize: null\n            };\n        }\n        // Ensure numeric fields are correctly parsed if they come as strings (Gemini's responseSchema helps, but defensive)\n        if (typeof parsedData.groupSize === 'string') {\n            parsedData.groupSize = parseInt(parsedData.groupSize, 10);\n            if (isNaN(parsedData.groupSize)) parsedData.groupSize = null;\n        }\n        // Ensure all optional fields are explicitly null if they are undefined in the parsed data\n        // This makes the ParsedTripDetails object predictable for the rest of the application.\n        parsedData.from = parsedData.from === undefined ? null : parsedData.from;\n        parsedData.to = parsedData.to === undefined ? null : parsedData.to;\n        parsedData.date = parsedData.date === undefined ? null : parsedData.date;\n        parsedData.budget = parsedData.budget === undefined ? null : parsedData.budget;\n        parsedData.mode = parsedData.mode === undefined ? null : parsedData.mode;\n        parsedData.groupSize = parsedData.groupSize === undefined ? null : parsedData.groupSize;\n        parsedData.message = parsedData.message === undefined ? null : parsedData.message; // Ensure message is null if undefined\n        // Defensive check: ensure intent is always valid or defaults to 'unknown'\n        const validIntents = [\n            \"book_trip\",\n            \"display_trip\",\n            \"cancel_trip\",\n            \"greet\",\n            \"error\",\n            \"unknown\"\n        ];\n        if (!parsedData.intent || !validIntents.includes(parsedData.intent)) {\n            console.warn(`NLP returned an invalid or missing intent: \"${parsedData.intent}\". Defaulting to 'unknown'.`);\n            parsedData.intent = 'unknown';\n            parsedData.message = parsedData.message || 'I could not determine your intent. Can you please rephrase?';\n        }\n        console.log('✅ NLP parse successful:', parsedData);\n        return parsedData;\n    } catch (error) {\n        console.error('❌ NLP parse failed:', error);\n        // Return an 'error' intent with the error message and all fields explicitly null\n        return {\n            intent: 'error',\n            message: error.message || 'An unexpected error occurred during NLP parsing.',\n            from: null,\n            to: null,\n            date: null,\n            budget: null,\n            mode: null,\n            groupSize: null\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/nlpParser.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Ftrip%2Froute&page=%2Fapi%2Ftrip%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ftrip%2Froute.ts&appDir=%2FUsers%2Fsurajrawat%2FDownloads%2FTripy%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsurajrawat%2FDownloads%2FTripy&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=export&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();