(()=>{var e={};e.id=154,e.ids=[154],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},325:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>m,routeModule:()=>p,serverHooks:()=>c,workAsyncStorage:()=>d,workUnitAsyncStorage:()=>g});var n={};r.r(n),r.d(n,{POST:()=>s});var o=r(2706),l=r(8203),i=r(5994),a=r(9187),u=r(970);async function s(e){try{let{message:t}=await e.json();if(!t)return a.NextResponse.json({error:"No message provided"},{status:400});let r=await (0,u.N)(t);if(!r)return a.NextResponse.json({error:"Could not parse trip details"},{status:400});let{from:n,to:o,date:l}=r;return a.NextResponse.json({step:"select_travel_type",message:`Got it! You're planning to travel from **${n}** to **${o}** on **${l}**. How would you like to travel? 🚆 Train, 🚌 Bus, or ✈️ Flight?`,data:{from:n,to:o,date:l}})}catch(e){return a.NextResponse.json({error:"Internal server error",details:e.message},{status:500})}}let p=new o.AppRouteRouteModule({definition:{kind:l.RouteKind.APP_ROUTE,page:"/api/planTrip/route",pathname:"/api/planTrip",filename:"route",bundlePath:"app/api/planTrip/route"},resolvedPagePath:"/Users/surajrawat/Downloads/Tripy/app/api/planTrip/route.ts",nextConfigOutput:"",userland:n}),{workAsyncStorage:d,workUnitAsyncStorage:g,serverHooks:c}=p;function m(){return(0,i.patchFetch)({workAsyncStorage:d,workUnitAsyncStorage:g})}},6487:()=>{},8335:()=>{},970:(e,t,r)=>{"use strict";async function n(e){let t=process.env.GEMINI_API_KEY;if(!t)return console.error("GEMINI_API_KEY is not set in your environment variables (.env.local)."),{intent:"error",message:"API key for NLP is missing. Please configure it.",from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null};let r=`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${t}`,n=`You are a precise travel information extraction API. Extract the following from user's message:
- from: Origin city (e.g., "New Delhi")
- to: Destination city (e.g., "Mumbai")
- date: Date of travel (e.g., "25th December", "tomorrow", "August 18 2025")
- budget: One of Luxury, Medium, Budget-friendly
- mode: One of Train, Bus, Flight
- groupSize: Number of people (e.g., 1, 2, 5)
- returnTrip: Boolean (true if the user wants a round trip or return journey, false or null if one-way)
- returnDate: Date of return travel (e.g., "30th December", "next week", "August 25 2025")
- intent: 'book_trip' if the user wants to plan or book a trip (including phrases like "book my ticket", "book it", "confirm booking", "book now", "make a booking", "reserve", "purchase ticket", "buy ticket", "proceed with booking", "complete booking", "finalize booking", "book this trip", "book the flight", "book the hotel"), 'display_trip' if they want to see a previous trip, 'cancel_trip' if they want to clear the current plan, 'greet' for greetings (e.g., "hi", "hello").
- message: An optional, brief confirmation or error message (e.g., "Understood!", "Please clarify the date.").

Return only JSON as per this schema with no markdown or extra text. If a field is not found, set its value to null.`,o={contents:[{role:"user",parts:[{text:`${n}

User message: "${e}"`}]}],generationConfig:{responseMimeType:"application/json",responseSchema:{type:"OBJECT",properties:{from:{type:"STRING",nullable:!0},to:{type:"STRING",nullable:!0},date:{type:"STRING",nullable:!0},budget:{type:"STRING",enum:["Luxury","Medium","Budget-friendly"],nullable:!0},mode:{type:"STRING",enum:["Train","Bus","Flight"],nullable:!0},groupSize:{type:"NUMBER",nullable:!0},returnTrip:{type:"BOOLEAN",nullable:!0},returnDate:{type:"STRING",nullable:!0},intent:{type:"STRING",enum:["book_trip","display_trip","cancel_trip","greet","error","unknown"]},message:{type:"STRING",nullable:!0}},required:["intent"]}}};try{let e;let t=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!t.ok){let e=await t.text();return console.error("Gemini API failed:",t.status,e),{intent:"error",message:`NLP service error: ${t.statusText}. Details: ${e.substring(0,150)}`,from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null}}let n=t.headers.get("content-type");if(!n||!n.includes("application/json")){let e=await t.text();return console.error("Gemini API did not return JSON. Content-Type:",n,"Raw body:",e),{intent:"error",message:"NLP service returned an invalid response format.",from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null}}let l=await t.json(),i=l.candidates?.[0]?.content?.parts?.[0]?.text;if(!i)return console.warn("Gemini API returned no text content or candidates."),{intent:"unknown",message:"I could not extract specific information from your message. Can you please rephrase?",from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null};let a=i.trim();a.startsWith("```json")?a=a.slice(7,-3).trim():a.startsWith("```")&&(a=a.slice(3,-3).trim());let u=a.replace(/: "null"/g,": null");try{e=JSON.parse(u)}catch(e){return console.error("Failed to parse Gemini's JSON response:",e,"Raw:",u),{intent:"error",message:"NLP service returned malformed JSON. Please try again.",from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null}}return"string"==typeof e.groupSize&&(e.groupSize=parseInt(e.groupSize,10),isNaN(e.groupSize)&&(e.groupSize=null)),e.from=void 0===e.from?null:e.from,e.to=void 0===e.to?null:e.to,e.date=void 0===e.date?null:e.date,e.budget=void 0===e.budget?null:e.budget,e.mode=void 0===e.mode?null:e.mode,e.groupSize=void 0===e.groupSize?null:e.groupSize,e.message=void 0===e.message?void 0:e.message,e.intent&&["book_trip","display_trip","cancel_trip","greet","error","unknown"].includes(e.intent)||(console.warn(`NLP returned an invalid or missing intent: "${e.intent}". Defaulting to 'unknown'.`),e.intent="unknown",e.message=e.message||"I could not determine your intent. Can you please rephrase?"),e.returnTrip=void 0===e.returnTrip?null:e.returnTrip,e.returnDate=void 0===e.returnDate?null:e.returnDate,console.log("✅ NLP parse successful:",e),e}catch(e){return console.error("❌ NLP parse failed:",e),{intent:"error",message:e.message||"An unexpected error occurred during NLP parsing.",from:null,to:null,date:null,budget:null,mode:null,groupSize:null,returnTrip:null,returnDate:null}}}r.d(t,{N:()=>n})}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),n=t.X(0,[994,452],()=>r(325));module.exports=n})();