exports.id=909,exports.ids=[909],exports.modules={9909:(e,t,o)=>{"use strict";o.d(t,{M:()=>n,searchHotels:()=>i});var r=o(5482);async function n(e){let t=process.env.RAPIDAPI_KEY,o=process.env.HOTEL_API_HOST;if(!t||!o)throw console.error("RAPIDAPI_KEY or HOTEL_API_HOST is not set in your environment variables."),Error("Hotel API credentials are not configured.");let r=`https://${o}/v2/regions?query=${encodeURIComponent(e)}&domain=IN&locale=en_IN`;try{let e=await fetch(r,{method:"GET",headers:{"x-rapidapi-host":o,"x-rapidapi-key":t}});if(!e.ok){let t=await e.text();throw console.error(`Failed to fetch regions (status ${e.status}):`,t),Error(`Failed to fetch regions: ${e.statusText}. Details: ${t.substring(0,200)}`)}let n=await e.json();return n?.data??[]}catch(e){throw console.error("Error in fetchRegions:",e),Error(`Could not retrieve region information: ${e.message}`)}}async function a(e){try{let t=await n(e),o=t?.[0];if(o)return console.log(`Found region ID for "${e}": ${o.gaiaId}`),o.gaiaId||null;return console.warn(`No region ID found for destination: "${e}"`),null}catch(t){return console.error(`Error getting region ID for "${e}":`,t),null}}async function i(e){let t=process.env.RAPIDAPI_KEY,o=process.env.HOTEL_API_HOST;if(!t||!o)return console.warn("Hotel API credentials not configured. Using mock data."),s(e);let r=await a(e.destination);if(!r)return console.warn("Hotel search aborted: No region ID obtained."),s(e);if(!e.checkInDate||!e.checkOutDate)return console.error("Check-in or check-out date is missing for hotel search."),s(e);let n=`https://${o}/v2/hotels/search?region_id=${r}&checkin_date=${e.checkInDate}&checkout_date=${e.checkOutDate}&adults_number=${e.adults||1}&domain=IN&locale=en_IN&sort_order=PRICE`;try{let r=await fetch(n,{method:"GET",headers:{"x-rapidapi-host":o,"x-rapidapi-key":t}});if(!r.ok){let e=await r.text();throw console.error(`Hotel API fetch failed (status ${r.status}):`,e),Error(`Failed to fetch hotels: ${r.statusText}. Details: ${e.substring(0,200)}`)}let a=await r.json();console.log("Raw Hotel API response:",JSON.stringify(a,null,2));let i=a?.properties??[];e.budget&&(i=i.filter(t=>{let o=t.price?.lead?.amount;return"number"==typeof o&&!(o<=0)&&("Luxury"===e.budget?o>=5e3:"Medium"===e.budget?o>=2e3&&o<5e3:"Budget-friendly"!==e.budget||o<2e3)}),console.log(`Filtered hotels by budget (${e.budget}). Remaining: ${i.length}`));let s=i.map(t=>{let o=t.optimizedReferrer?.appLink||t.optimizedReferrer?.webLink||"#";return"#"===o&&console.warn(`No valid deeplink found for hotel "${t.name}". Using placeholder.`),{id:t.id?.toString()||`hotel-${Math.random().toString(36).substring(7)}`,name:t.name||"Unknown Hotel",address:t.neighborhood||t.address?.addressLine||"No address available",price:t.price?.lead?.amount||0,currency:t.price?.lead?.currency||"INR",rating:t.reviews?.score||null,imageUrl:t.propertyImage?.image?.url||"https://placehold.co/400x200/cccccc/000000?text=Hotel+Image",deeplink:o,category:e.budget}}).filter(e=>e.price>0);return s.sort((e,t)=>e.price-t.price),s}catch(t){return console.error("Error in searchHotels:",t),s(e)}}function s(e){let t="Luxury"===e.budget?6e3:"Medium"===e.budget?3e3:1500,o=[{id:"mock-hotel-1",name:`${e.budget||"Comfortable"} Hotel ${e.destination}`,address:`123 Main Street, ${e.destination}`,price:t+Math.floor(1e3*Math.random()),currency:"INR",rating:4.2+.8*Math.random(),imageUrl:`https://placehold.co/400x200/7c3aed/ffffff?text=${e.budget}+Hotel+1`,deeplink:`https://mock.hotels.com/book?destination=${e.destination}&budget=${e.budget}`,category:e.budget||"Medium"},{id:"mock-hotel-2",name:`${e.destination} ${e.budget||"Premium"} Resort`,address:`456 Luxury Avenue, ${e.destination}`,price:t+Math.floor(800*Math.random()),currency:"INR",rating:4.5+.5*Math.random(),imageUrl:`https://placehold.co/400x200/7c3aed/ffffff?text=${e.budget}+Hotel+2`,deeplink:`https://mock.hotels.com/book?destination=${e.destination}&budget=${e.budget}`,category:e.budget||"Medium"},{id:"mock-hotel-3",name:`${e.budget||"Modern"} Inn ${e.destination}`,address:`789 Comfort Lane, ${e.destination}`,price:t+Math.floor(600*Math.random()),currency:"INR",rating:4+.8*Math.random(),imageUrl:`https://placehold.co/400x200/7c3aed/ffffff?text=${e.budget}+Hotel+3`,deeplink:`https://mock.hotels.com/book?destination=${e.destination}&budget=${e.budget}`,category:e.budget||"Medium"}];return console.log(`Generated ${o.length} mock hotels for ${e.destination} with ${e.budget} budget`),o}o.n(r)().config()},5482:(e,t,o)=>{let r=o(9021),n=o(3873),a=o(1820),i=o(5511),s=o(7336).version,l=["\uD83D\uDD10 encrypt with Dotenvx: https://dotenvx.com","\uD83D\uDD10 prevent committing .env to code: https://dotenvx.com/precommit","\uD83D\uDD10 prevent building .env in docker: https://dotenvx.com/prebuild","\uD83D\uDCE1 observe env with Radar: https://dotenvx.com/radar","\uD83D\uDCE1 auto-backup env with Radar: https://dotenvx.com/radar","\uD83D\uDCE1 version env with Radar: https://dotenvx.com/radar","\uD83D\uDEE0️  run anywhere with `dotenvx run -- yourcommand`","⚙️  specify custom .env file path with { path: '/custom/path/.env' }","⚙️  enable debug logging with { debug: true }","⚙️  override existing env vars with { override: true }","⚙️  suppress all logs with { quiet: true }","⚙️  write to custom object with { processEnv: myObject }","⚙️  load multiple .env files with { path: ['.env.local', '.env'] }"];function c(e){return"string"==typeof e?!["false","0","no","off",""].includes(e.toLowerCase()):!!e}let d=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function u(e){console.log(`[dotenv@${s}][DEBUG] ${e}`)}function p(e){console.log(`[dotenv@${s}] ${e}`)}function g(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function h(e){let t=null;if(e&&e.path&&e.path.length>0){if(Array.isArray(e.path))for(let o of e.path)r.existsSync(o)&&(t=o.endsWith(".vault")?o:`${o}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`}else t=n.resolve(process.cwd(),".env.vault");return r.existsSync(t)?t:null}function f(e){return"~"===e[0]?n.join(a.homedir(),e.slice(1)):e}let m={configDotenv:function(e){let t;let o=n.resolve(process.cwd(),".env"),a="utf8",i=process.env;e&&null!=e.processEnv&&(i=e.processEnv);let s=c(i.DOTENV_CONFIG_DEBUG||e&&e.debug),d=c(i.DOTENV_CONFIG_QUIET||e&&e.quiet);e&&e.encoding?a=e.encoding:s&&u("No encoding is specified. UTF-8 is used by default");let g=[o];if(e&&e.path){if(Array.isArray(e.path))for(let t of(g=[],e.path))g.push(f(t));else g=[f(e.path)]}let h={};for(let o of g)try{let t=m.parse(r.readFileSync(o,{encoding:a}));m.populate(h,t,e)}catch(e){s&&u(`Failed to load ${o} ${e.message}`),t=e}let v=m.populate(i,h,e);if(s=c(i.DOTENV_CONFIG_DEBUG||s),d=c(i.DOTENV_CONFIG_QUIET||d),s||!d){var E;let e=Object.keys(v).length,o=[];for(let e of g)try{let t=n.relative(process.cwd(),e);o.push(t)}catch(o){s&&u(`Failed to load ${e} ${o.message}`),t=o}p(`injecting env (${e}) from ${o.join(",")} ${(E=`-- tip: ${l[Math.floor(Math.random()*l.length)]}`,process.stdout.isTTY?`\x1b[2m${E}\x1b[0m`:E)}`)}return t?{parsed:h,error:t}:{parsed:h}},_configVault:function(e){let t=c(process.env.DOTENV_CONFIG_DEBUG||e&&e.debug),o=c(process.env.DOTENV_CONFIG_QUIET||e&&e.quiet);(t||!o)&&p("Loading env from encrypted .env.vault");let r=m._parseVault(e),n=process.env;return e&&null!=e.processEnv&&(n=e.processEnv),m.populate(n,r,e),{parsed:r}},_parseVault:function(e){let t;let o=h(e=e||{});e.path=o;let r=m.configDotenv(e);if(!r.parsed){let e=Error(`MISSING_DATA: Cannot parse ${o} for an unknown reason`);throw e.code="MISSING_DATA",e}let n=g(e).split(","),a=n.length;for(let e=0;e<a;e++)try{let o=n[e].trim(),a=function(e,t){let o;try{o=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code){let e=Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw e.code="INVALID_DOTENV_KEY",e}throw e}let r=o.password;if(!r){let e=Error("INVALID_DOTENV_KEY: Missing key part");throw e.code="INVALID_DOTENV_KEY",e}let n=o.searchParams.get("environment");if(!n){let e=Error("INVALID_DOTENV_KEY: Missing environment part");throw e.code="INVALID_DOTENV_KEY",e}let a=`DOTENV_VAULT_${n.toUpperCase()}`,i=e.parsed[a];if(!i){let e=Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${a} in your .env.vault file.`);throw e.code="NOT_FOUND_DOTENV_ENVIRONMENT",e}return{ciphertext:i,key:r}}(r,o);t=m.decrypt(a.ciphertext,a.key);break}catch(t){if(e+1>=a)throw t}return m.parse(t)},config:function(e){if(0===g(e).length)return m.configDotenv(e);let t=h(e);if(!t){var o;return o=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.error(`[dotenv@${s}][WARN] ${o}`),m.configDotenv(e)}return m._configVault(e)},decrypt:function(e,t){let o=Buffer.from(t.slice(-64),"hex"),r=Buffer.from(e,"base64"),n=r.subarray(0,12),a=r.subarray(-16);r=r.subarray(12,-16);try{let e=i.createDecipheriv("aes-256-gcm",o,n);return e.setAuthTag(a),`${e.update(r)}${e.final()}`}catch(r){let e=r instanceof RangeError,t="Invalid key length"===r.message,o="Unsupported state or unable to authenticate data"===r.message;if(e||t){let e=Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw e.code="INVALID_DOTENV_KEY",e}if(o){let e=Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw e.code="DECRYPTION_FAILED",e}throw r}},parse:function(e){let t;let o={},r=e.toString();for(r=r.replace(/\r\n?/mg,"\n");null!=(t=d.exec(r));){let e=t[1],r=t[2]||"",n=(r=r.trim())[0];r=r.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),'"'===n&&(r=(r=r.replace(/\\n/g,"\n")).replace(/\\r/g,"\r")),o[e]=r}return o},populate:function(e,t,o={}){let r=!!(o&&o.debug),n=!!(o&&o.override),a={};if("object"!=typeof t){let e=Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw e.code="OBJECT_REQUIRED",e}for(let o of Object.keys(t))Object.prototype.hasOwnProperty.call(e,o)?(!0===n&&(e[o]=t[o],a[o]=t[o]),r&&(!0===n?u(`"${o}" is already defined and WAS overwritten`):u(`"${o}" is already defined and was NOT overwritten`))):(e[o]=t[o],a[o]=t[o]);return a}};e.exports.configDotenv=m.configDotenv,e.exports._configVault=m._configVault,e.exports._parseVault=m._parseVault,e.exports.config=m.config,e.exports.decrypt=m.decrypt,e.exports.parse=m.parse,e.exports.populate=m.populate,e.exports=m},7336:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"17.2.1","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","pretest":"npm run lint && npm run dts-check","test":"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=text --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"homepage":"https://github.com/motdotla/dotenv#readme","funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@types/node":"^18.11.3","decache":"^4.6.2","sinon":"^14.0.1","standard":"^17.0.0","standard-version":"^9.5.0","tap":"^19.2.0","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')}};