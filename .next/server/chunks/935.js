"use strict";exports.id=935,exports.ids=[935],exports.modules={3935:(e,t,o)=>{async function r(e,t,o,r,a){try{let n=await fetch(`https://api.uber.com/v1.2/estimates/price?start_latitude=${t}&start_longitude=${o}&end_latitude=${r}&end_longitude=${a}`,{method:"GET",headers:{Authorization:`Bearer ${e}`,"Content-Type":"application/json"}});if(!n.ok){let e=await n.json();throw Error(e.message||"Failed to fetch Uber estimates")}return await n.json()}catch(e){throw console.error("Uber estimate error:",e),e}}async function a(e){try{let t=process.env.UBER_CLIENT_ID,o=process.env.UBER_CLIENT_SECRET;if(t&&o)try{let t=await r("mock_access_token",e.origin.lat,e.origin.lng,e.destination.lat,e.destination.lng);if(t&&t.prices&&t.prices.length>0)return t.prices.map(t=>({id:`UBER-${t.product_id}`,provider:"Uber",cabType:t.display_name,price:t.estimate.split("-")[0].replace(/\D/g,""),currency:"INR",estimatedTime:Math.round(t.duration/60).toString(),distance:t.distance.toFixed(1),deeplink:`https://m.uber.com/ul/?action=setPickup&pickup[latitude]=${e.origin.lat}&pickup[longitude]=${e.origin.lng}&pickup[nickname]=${encodeURIComponent(e.origin.name)}&dropoff[latitude]=${e.destination.lat}&dropoff[longitude]=${e.destination.lng}&dropoff[nickname]=${encodeURIComponent(e.destination.name)}`}))}catch(e){console.error("Error fetching Uber estimates:",e)}return function(e,t,o){let r=[],a=["Uber","Ola","Meru","BluSmart","Rapido"],n={Uber:["UberGo","Premier","UberXL","UberAuto","UberMoto"],Ola:["Mini","Sedan","Prime","SUV","Auto"],Meru:["Hatchback","Sedan","SUV"],BluSmart:["Electric Sedan","Electric SUV"],Rapido:["Bike","Auto"]},i=(5+25*Math.random()).toFixed(1),d=5+Math.floor(4*Math.random());for(let o=0;o<d;o++){let d=a[Math.floor(Math.random()*a.length)],s=n[d][Math.floor(Math.random()*n[d].length)],l=Math.round(parseFloat(i)*(20+15*Math.random())*10)/10;s.includes("SUV")||s.includes("XL")?l*=1.5:s.includes("Premier")||s.includes("Sedan")?l*=1.2:(s.includes("Auto")||s.includes("Bike")||s.includes("Moto"))&&(l*=.7);let c=10*Math.round(l/10),h=Math.round(2*parseFloat(i));r.push({id:`${d.toUpperCase()}-${Date.now()}-${o}`,provider:d,cabType:s,price:c,currency:"INR",estimatedTime:h.toString(),distance:i,deeplink:`https://example.com/book-cab/${d.toLowerCase()}/${e.toLowerCase()}-${t.toLowerCase()}`})}return r.sort((e,t)=>e.price-t.price)}(e.origin.name,e.destination.name,e.passengers)}catch(e){throw console.error("Cab API Error:",e),Error(`Failed to fetch cab data: ${e.message}`)}}async function n(e,t,o,r,a){if(await new Promise(e=>setTimeout(e,1e3+1e3*Math.random())),!(Math.random()>.15))throw Error("Cab booking failed - no drivers available");let n=["Rahul","Amit","Suresh","Rajesh","Vikram","Sanjay","Anil","Dinesh"],i=n[Math.floor(Math.random()*n.length)]+" "+String.fromCharCode(65+Math.floor(26*Math.random()))+".",d=["Swift Dzire","Wagon R","Alto","Innova","Ertiga","i10","i20","Verna"],s=d[Math.floor(Math.random()*d.length)],l=`${["DL","MH","KA","TN","UP","HR"][Math.floor(6*Math.random())]}${Math.floor(100*Math.random())}${String.fromCharCode(65+Math.floor(26*Math.random()))}${Math.floor(1e4*Math.random())}`;return{bookingId:`CAB-${Date.now()}-${Math.random().toString(36).substring(2,8).toUpperCase()}`,status:"confirmed",cabId:e,driverDetails:{name:i,phone:`+91${Math.floor(9e9*Math.random())+1e9}`,vehicleNumber:l,vehicleType:s},pickupTime:`${Math.floor(10*Math.random())+2} mins`,fare:Math.floor(500*Math.random())+200,currency:"INR"}}o.d(t,{bookCab:()=>n,W:()=>a})}};